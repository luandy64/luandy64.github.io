[
    {
        "uri": "/_index",
        "title": "Home",
        "content": "\nWelcome to my cafe!\n\nThis blog is mainly written for me, but I welcome you, the reader, to explore it too.\n\nLinks\n\nUses\nPosts I like\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/_index",
        "title": "Cappucchinos",
        "content": "\nThink blog posts.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/2019-week-2",
        "title": "2019 Week 2",
        "content": "\nHere are some of the things I learned this week:\n\nPython\n\nYou should not set a parameter's default to some mutable object.\n\n!--more--\n\nSince parameters are \"passed by reference\" in Python, when you modify the\n  parameter set to an empty type, you actually change the default. This results\n  in the next call to that function to use whatever \"new\" object you've created\n  as the default for that parameter.\nIt's not obvious to me why the language behaves this way. This makes me think\n  of James Powell's Advanced Metaphors in Coding with Python; I wonder\n  if there is a metaphor I'm missing here.\nThis came from Chapter 8 in Fluent Python by Luciano Ramalho\n\n Emacs\n\nYou can scroll the \"other\" window without putting point there.\n\nI like to split my Emacs screen a lot. When I'm working in window and\n  referencing the other, sometimes I want to scroll the other window.\nI tried to use a keybinding I found, C-M-v and C-M-V, to do the scrolling,\n  but that didn't work. I even tried defining these myself in my init.el file.\nUltimately, I settled on using M=PageUp and M-PageDown, and I set these as\n  macros on my keyboard.\n\nQMK\n\nYou should not define \"aliases\" in an enum.\n\nWhile trying to define macros in QMK, I was told that aliases for keycodes\n  should not be included in any custom keycode enums. The proper way to define\n  an alias is to use the define preprocessor directives.\nI would like to dig into why this is the case, but it's supposedly using some\n  C macro to do so and I have a feeling this is a rabbit hole that I have no\n  time for.\n\n[link1]: https://www.youtube.com/watch?v=R2ipPgrWypI\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/2019-week-3",
        "title": "2019 Week 3",
        "content": "\nPython\n\nI have to thank Fluent Python for all of these tips and trick with Python.\n\nYou can implement dunder methods to make an object feel more Pythonic.\n\n!--more--\n\nThings like repr, str, format, bytes, abs,\n  bool, hash, and eq.\n\nYou can extend the Format Specification Mini-language.\n\nThere's already quite a bit you can do with what is given to you. I think it's\n  cool that you can add new format specifications or I bet even override the\n  standard ones.\n\nYou can make properties of an object read only.\n\nI think the code for doing this looks really slick.\n\nThere's a convention that any variable name that starts with an underscore is\n  private in Python. But that's just a Python people thing.\n\nSo in your constructor, you would store any parameters as private variables.\n  Then make a getter with the name of the variable, sans underscore. Decorate it\n  with a @property - which I think is to mainly mark it as a getter? - and\n  this makes the variables read only unless you really know what Python is\n  doing.\n\n Emacs\n\nYou can find and replace across multiple files.\n\nI found this thing called dired. It was a little hard to use because the\n  version of Emacs I'm running had a different function bound to the keyboard\n  shortcut used in the docs.\n\n  Here's what I did:\n\n    M-x find-dired\n  pick the directory you want to search in\n  Run find (with args): -name \".json\"\n  t  # To select all files from the previous command\n  M-x dired-do-find-regexp-and-replace\n  find regex\n  replace regex\n  \nI have Projectile installed in Emacs, so I could use the\n  projectile-replace function to find and replace strings. I believe that the\n  directory it looks in is the current project. Projectile defines any git\n  repo as a project, so that shoulc cover like 90% of my use cases.\n\nYou can save multiple buffers at a time.\n\nThe previous sentence is a bit misleading because you still have to save them\n  one after another; though there is a key that saves them all.\n\nI used C-x s and it prompted me in the minibuffer for each file that needed to be saved.\n\nI believe that C-x s ! will save all with no prompt.\n\nQMK\n\nThe mouse keys are pretty simple to use.\n\nThere are four navigation keys, five mouse buttons, and four scrolling keys.\n\nThere are also three \"set acceleration\" buttons, but I'm not sure I noticed a\n  difference in the acceleration when I was testing it.\n\n Thoughts\n\nI don't know how often I'll use that \"read-only\" trick in my day to day work. I\nstill think it's a good pattern to know though. I'm a little surprised there\nisn't some syntatic sugar to do it all in one step though. Or maybe that's just\nthe lazy part of me speaking.\n\nSince I use Emacs all day, every day, it's exciting to constantly be learning\nthese little refinements to my workflow. I wonder how long it'll be until I\nstart twaeak every little thing to work how I want it to work.\n\nSpeaking of tweaking things, I decided to not tweak my keyboard this week.\nInstead, I just wanted to look into this feature: Mouse Keys. I think it's a\nneat idea, I doubt it's super practical, but it'll raise some eyebrows when\npeople see me crudely controlling my mouse from my keyboard.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/added-mathjax-support",
        "title": "Adding Mathjax",
        "content": "Commands Needed\nThe easiest step was from the Jekyll Docs,\nwhich pointed me to this page on [Visually\nEnforced](http://www.gastonsanchez.com/visually-enforced/opinion/2014/02/16/Mathjax-with-jekyll/).\nSo the following piece of code went into my /_layouts/default.html 's header:\n\n!--more--\n<script type=\"text/javascript\"\n    src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"\n/script\n\nTesting the site was too slow with GitHub Pages, so I served the site locally to\nsee changes on every refresh: bundle exec jekyll serve\n\n Links on this page\nJekyll Docs\nVisually Enforced\nkramdown\nSupported LaTeX Commands\nStackExchange Proof QED\n\n---\n\nThe Details\nTo make sure everything worked after adding the MathJax line, I found a nice\nchunk of code from\nkramdown in their\nsyntax guide. The $\\LaTeX$ rendered beautifully and had no issues whatsoever.\nI had done some more digging and saw that kramdown already supports \"Math\nBlocks\", so to test it, I removed the MathJax script from my template. It broke\nthe nice piece of $\\LaTeX$ code from earlier, so I quickly put the script\nback.\n\nThe next test I wanted to try was to see what commands were available to me\nbecause I couldn't find a list anywhere. So I grabbed a proof I wrote from my\nReal Analysis class and threw it into a Markdown file. It kept rendering it as\ntext in a box; basically like I used some CSS to give that chunk of text an\noutline. From there, I kept playing with it, in hopes that something would work.\nkramdown said that everything should be in $$...$$, which I tried and only got\na group of -box-outlined text. Then I thought maybe I need to import the AMS\nMath package somewhere. It was after that thought, I think, that I stumbled upon\na list of [Supported LaTeX\nCommands](https://docs.mathjax.org/en/latest/tex.htmlsupported-latex-commands)...\n\nSo after all of that work, it turns out the proof environment I was using is\nunsupported. That's alright though, since that was mainly for the TeX engine to\nput a fancy italic Proof at the start of my work and a box at the end. I can\nformat the Proof first, and probably put the black box at the end.\n\nProof. Look it worked.\nCredit\n$$\\tag*{$\\blacksquare$}$$\n\nAnyway, I'll have to spend some time looking through what commands I can and\ncannot use, but I am happy to have them at all. I doubt anyone who wrote the\npages that helped me in this process will ever see this page, but thank you!\n\nIn Summary\nIt was a little confusing at first, but so was setting up Jekyll in the first\nplace. The confusion was mainly due to the fact that I had to dig through Jekyll\nsupport pages, kramdown support pages, and MathJax support pages. In the end\nthough, it just took some trial and error on a local version of my site to\nfigure out what works and what doesn't.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/adding-newlines-to-one-line-files",
        "title": "Adding Newlines to One Line Files",
        "content": "\nProblem\n\nI have a directory of files and need to find all of the one liners and add newlines to them\n\n Solution\nmark every file in dired (not sure if there is a fast way to do this) by holding m from the top\n! (dired-do-shell-command)\nwc -l\nM-x sort-lines ine the shell output buffer\n\nThe sorting was just useful because it grouped the one liners at the top of the\nbuffer. But then I could cross reference names and open files from dired and\nmake the change I wanted to make.\n\nI tried to do this with consult-find because of this answer\nhttps://unix.stackexchange.com/a/170276, but it didn't jump me to the file I\nneeded to change. So there's no added benefit to having the find do an -exec\n",
        "tags": [
            "emacs"
        ]
    },
    {
        "uri": "/cappucchino/babashka-datetime",
        "title": "Babashka Datetime",
        "content": "\nIf I need a datetime in Python, I reach for\n\nfrom datetime import datetime\n\ndatetime.now()\n\nSo I need something as quick for clojure.\n\nApparently, it's just\n\n(- (java.time.LocalDate/now)\n     str)\n;; = \"2023-10-15\"\n",
        "tags": [
            "babashka"
        ]
    },
    {
        "uri": "/cappucchino/bash-histtimeformat",
        "title": "Bash HISTTIMEFORMAT",
        "content": "\nI have this line in my =bashrc=\n\n#+begin_src bash\n  # Prepend history entries with timestamps\n  export HISTTIMEFORMAT='%FT%T%z '\n#+end_src\n\nI just learned that =~/.bash_history= does not have these timestamps, and neither does the menu presented to you in =fzf=.\n\nBut you do see it if you look in the output of the =history= command.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/bash-while-loops",
        "title": "Bash `while` loops",
        "content": "\nHere's a bash snippet I can see myself using one day\n\nwhile :; do ls -lh \"$( ls -t1 /tmp/tmp* | head -n 1 )\"; sleep 10; done\n\n\"$( ls -t1 /tmp/tmp* | head -n 1 )\": Get a file name\n  ls -t1 /tmp/tmp: List the files in /tmp/tmp ordered by most recently updated\n  head -n 1: Get the first one\nls -lh one-file: Get the long listing of just one file\nThe rest of it is just to do it over and over so that I can see changes in the file size\n",
        "tags": [
            "bash"
        ]
    },
    {
        "uri": "/cappucchino/biff-tutorial",
        "title": "Biff Tutorial",
        "content": "\nHere are my notes as I go through the Biff tutorial.\n\nI've made a github repo here.\n\nI spotted something that didn't work quite right. So I opened an issue and PR on the main repo. Here\nare those links: issue and PR.\n\nSo I got to a point where the tutorial wanted me to hook up an email sending service to get login\ninformation sent out to users. I knew I already had a Resend account, so I opted to hook that up\ninstead.\n\nAnd instead of figuring out the API myself, I'm just using charm's pop app and shelling out to it.\n\n[1]: https://biffweb.com/docs/tutorial/build-a-chat-app/\n[2]: https://github.com/luandy64/biff-tutorial\n[3]: https://github.com/jacobobryant/eelchat/issues/2\n[4]: https://github.com/jacobobryant/eelchat/pull/3\n[5]: https://github.com/charmbracelet/pop\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/blogs-to-look-through",
        "title": "Blogs to Look Through",
        "content": "\nHere are some blogs I like to look through for inspiration:\n- https://notes.andymatuschak.org/About_these_notes\n- https://maggieappleton.com/garden\n- https://www.reddit.com/user/Nicolas-Rougier/submitted/?sort=new\n  \n",
        "tags": []
    },
    {
        "uri": "/cappucchino/clojure-day-1",
        "title": "Clojure Day 1",
        "content": "\nToday I started reading through this book to learn some Clojure. It's called\nClojure for the Brave and True.\n\nI thought I would make myself a little cheatsheet that grows as I progress\nthrough the book.\n\nForms\n\nThese are like the building blocks of the files.\n1\n\"This string\"\n[\"Vectors\" \"of\" \"strings\" \"are\" \"a\" \"thing\"]\n\n Operators\nAll operations use the same structure. Given an operator operator and operands\nop1, op2, ... opN, you use the following structure:\n(operator op1 op2 ... opN)\n\nComments\n; This is a single line comment\n\n Control Flow\n\nif\n\n(if some-boolean-form\n    then-form\n    an-optional-else form)\n\nIf the else-form is omitted and triggered, then nil is returned.\n\nThe then-form and else-form can only be a one-liner, see do if you need\n  more functionality than that\n\n do\n\n(if some-boolean-form\n    (do \"Some truthy thing 1\"\n        \"Some truthy thing 2\")\n    (do \"Some falsey thing 1\"\n        \"Some falsey thing 2\"))\n\nwhen\n\nThink of this as an if-do without an else-form\n\n(when some-true-form\n    (println \"True thing found\"))\n\n Booleans\n\ntrue or false\nnil is no value\n\nSome operators:\n\n(or op1 op2 ... opN) : return first truthy value or last value\n(and op1 op2 ... opN) : return the first falsey value or the last truthy\n  value\n(= op1 op2) : test for equality\n(nil? op1) : check for nil\n\n Save state\n(def varName value)\n\nData Structures\n\nAll data structures are immutable\n\n Numerical Things\n\nNumbers: 17\nFloats: 3.4\nRatios: 51/100\n\nStrings\n\nDenoted by double quotes\nEscape any double quotes inside as needed\n\n Maps\n; An empty map\n{}\n\n; A map with keywords for keys\n{:firstname \"Andy\"\n :lastname \"Lu\"}\n \n; Mapping a string to a function\n{\"Totally-legal\" +}\n\n; Nested Maps\n{:name {:first \"Andy\" :last \"Lu\"}}\n\n; Hash Map\n(hash-map :firstname \"Andy\" :lastname \"Lu\")\nReading from maps\n\nget: \n    (get {:a 1 :b 2} :b), returns 2\n    '(get {:a 1 :b 2} :c), returns `nil'\n'get-in': Used for nested maps\n    (get-in {:a 0 :b {:c 100}} [:b :c]), returns 100\nUsing a map like an operator\n    ({:name \"Andy\"} :name), returns \"Andy\"\n    \n Keywords\nPrimarily used as keys in maps\nDenoted :a\n\nVectors\nZero Indexed\nDeclaring one:\n    [3 2 1]\n    (vector \"some\" \"list\" \"of\" \"things\"), returns `[\"some\" \"list\" \"of\"\n      \"things\"]`\nAdding to the end of a vector:\n    (conj [1 2 3] 4), returns [1 2 3 4]\n    \n Lists\nZero Indexed\nDeclaring:\n    '(1 2 3 4), returns (1 2 3 4)\n    '(list 1 \"two\" {3 4}), returns (1 \"two\" {3 4})\nRetriving the nth value:\n    (nth '(4 3 2 1 0) 1), returns 3\n\nSets\nContain only unique values\nDeclaring:\n    {\"word\" 20 :name}, returns #{\"word\" 20 :name}\n    (set [1 1 2 3 3 3 4]), returns #{1 2 3 4}\nChecking for a value in a set:\n    If you want a boolean back:\n        (contains? #{:a :b} :a), returns true\n        (contains? #{1 2} 3), returns false\n    If you want a value back:\n        (:a #{:a :b :c}), returns :a\n        (get #{1 2} 1), returns 1\n        (get #{:a nil} nil), returns nil\n",
        "tags": [
            "learning",
            "clojure"
        ]
    },
    {
        "uri": "/cappucchino/clojure-loops",
        "title": "Clojure Loops",
        "content": "\nWhile working on a practice problem today, I realized I have to loop over a set\nof things. Acutally, to get super specific I wanted to use two loops, one nested\nin the other to do some comparisons between elements in the set. \n\nI don't understand using a loop over a function call though.\n\n!--more--\n\nI also didn't get a ton of time to play with the problem, but I hope to work on\nit some more tomorrow night. Aside from the actual solution of the practice\nproblem, the main distraction I had today was figuring out how to make loops in\nClojure work. \n\nI think it looks like this:\n(loop [some-var-name initial-val]\n    (if some-break-cond\n        (doThing)\n     (recur modified-some-var-name)))\n\nTo my understanding, recur just \"calls\" the loop again, as if it were some\nanonymous function. Modifying the thing in the square brackets differentiates the\ncurrent iteration from the previous one. \n\nSo this is where I am in my Clojure journey. I'm excited for the \"ah-ha!\" moment\nto occur tomorrow!\n",
        "tags": [
            "learning",
            "clojure"
        ]
    },
    {
        "uri": "/cappucchino/clojurescript-project-setup",
        "title": "Clojurescript Project Setup",
        "content": "\nOutcomes\n\nBy the end of this post, you will be able to setup a new clojurescript\nproject, setup emacs to be your development environment, and deploy your\napp to Github Pages\n\n Background\n\nI've written two clojurescript projects now, Sundial and\nDataBooze, and I want to document the set up process. The first time\nwas a massive undertaking because it was my first time. But frustrating\nenough, so was the second time, even though I thought I nailed down the\nprocess and took notes on it. The process didn't work and the notes don't\nexist, so here we are today.\n\nPre-requisites\n\nThere are only three things you need to start: an editor, a terminal, and\nleiningen. For me, this means Emacs, bash, and leiningen\ninstalled through my package manager.\n\n Instructions\n\nIn your terminal, navigate to where you want the project to live and run\n\n$ lein new figwheel-main my-awesome-project -- --reagent\n\nYou should see a new directory called my-awesome-project. There's a\nbasic skeleton that is created for you, so we want to check that it works\n\n$ cd my-awesome-project\n$ lein fig:build\n\nThis will compile the clojurescript into javascript, serve the project on\n(by default) http://localhost:9500, and give you a clojurescript REPL.\n\nIf you don't use emacs, I recommend you leave this REPL open and start\nediting the code in src/myawesomeproject/core.cljs. If you do use\nemacs, I recommend setting up CIDER and getting nREPL to work.\n\nFirst we open emacs and install CIDER\n\nM-x package-refresh-contents [RET]\nM-x package-install [RET] cider [RET]\n\nWhen I run M-x cider-version, I get CIDER 0.26.0-snapshot.\n\nIf you haven't already, kill the REPL we opened from lein fig:build.\nWe're going to start a new one in emacs.\n\nOpen src/myawesomeproject/core.cljs in a buffer. Then run\n\nM-x cider-jack-in-cljs [RET]\n\nA series of prompts will appear, answer with:\nlein\n  This one most likely will not appear, but I saw it once and the other\n    option was shadow-cljs. I didn't try to pick shadow-cljs because\n    it just worked when I picked lein\nfigwheel-main\ndev\n\nThis will give you a buffer with output similar to what we got at the\nterminal. You can edit the code in core.cljs and see the UI reload when\nyou save. More importantly, you can evaluate the clojurescript in your\nbuffer.\n\nDeploying to Github Pages\n\nI'm assuming this would work for Gitlab Pages or Bitbucket Pages, but I\nuse Github and didn't test those options.\n\nCreate a branch called gh-pages. You'll just need 3 files at the root of\nyour project: index.html, style.css, and main.js. Obviously, the\nnames are up to you, but here's where I got the files.\n\nindex.html is just some boilerplate HTML. Here's one you can use:\n\n!DOCTYPE html\nhtml\n  head\n    titleMy title/title\n    link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/\n  /head\n  body\n    div id=\"app\"/div\n    script src=\"main.js\"/script\n  /body\n/html\n\nThe important part here is that you have some element with id=\"app\"\nbecause that's how we hook up the javascript to the project. But again,\neven that is configurable.\n\nTo get style.css and main.js, I run these commands at the root of the\nproject\n\n$ lein fig:min\n2020-07-06 09:13:50.378:INFO::main: Logging initialized @4805ms to org.eclipse.jetty.util.log.StdErrLog\n[Figwheel] Validating figwheel-main.edn\n[Figwheel] figwheel-main.edn is valid \\(ツ)/\n[Figwheel] Compiling build dev to \"resources/public/cljs-out/dev-main.js\"\n[Figwheel] Successfully compiled build dev to \"resources/public/cljs-out/dev-main.js\" in 12.307 seconds.\n$ cp resources/public/cljs-out/dev-main.js main.js\n$ cp resources/public/css/style.css .\n\nSo now you can commit the HTML, CSS, and JS to the gh-pages branch,\npush, turn on Github Pages deploys in the Settings tab of your repo, and\nsee your live project.\n\n[Sundial]: /sundial\n[DataBooze]: /databooze\n[leiningen]: https://github.com/technomancy/leiningen/wiki/Packaging\n[Emacs]: https://www.gnu.org/software/emacs/\n[bash]: https://www.gnu.org/software/bash/\n[CIDER]: https://github.com/clojure-emacs/cider\n[nREPL]: https://github.com/nrepl/nrepl\n",
        "tags": [
            "clojurescript",
            "emacs",
            "projects"
        ]
    },
    {
        "uri": "/cappucchino/customizing-forgejo",
        "title": "Customizing Forgejo",
        "content": "\nI spent a good chunk of time today iterating on customizing Forgejo to have a\ndifferent logo, favicon, and start page. The docs say that the repo is not going\ntry to be backwards compatible in this area, so I want to write this down\nbecause I'll probably have to do it again.\n\nHere are the doc links:\nForgejo - Interface customization  \n\n Setting a custom logo for your instance, serving custom public files or\n modifying pages shown by Forgejo (such as the homepage) is possible. However,\n they impose an additional maintenance burden on administrators and, most\n importantly, are unsupported.\n\n Unsupported means that future updates are likely to break your changes without\n any warning.\n\n: Here is the text that made me think, \"Hey I should write this up\"\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/daily-blog-1-midsummer-check-in",
        "title": "Daily Blog 1 Midsummer Check In",
        "content": "Midsummer might not be the right word here. It's close enough, but I'm more \nlike two thirds of the way in. \n\n!--more--\n\nThe last two months have been incredible. The first month - Mid May to Mid \nJune - was mainly concerned with moving away from college, literally and \nfiguratively. It's easy to get trapped in thinking \"This is it, welcome to The \nGrind. I'll blink and life will whoosh by\". I mean, you always hear about how \nthings just get harder once you leave college. Friends are harder to come by, \nbills pile up, your body breaks down.\n\nThankfully- and not surprisingly - I didn't see it that way. \n\nWith all of the free time I had, I was able to pour it into doing things that I \nwanted to do. I let my attention be grabbed by whatever little project caught \nmy eye or interesting thing I wanted to start doing. \n\nI started practicing drawing, working on taking pictures, editing pictures with \nnifty phone apps, wood carving, biking, meditating, reading, writing, and last \nbut not least coding. Not everything was done consistently, but that's besides \nthe point. I gained a lot of time, so I filled that time. \n\nIn the last month - Mid June to Mid July - I really cracked down and set out to \nwork on web development. There has been quite a bit of exploring here too. \nWorking through freeCodeCamp's material, I've written quite a few sites and \nrefined my knowledge of responsive design. I am no where near perfect, but \nthese days, some things are clicking faster; some things still confuse me to no \nend. Hey, it's part of the process.\n\nCome back tomorrow for me to talk about these things or other things. I want to \nsee how many of these blog posts I can write in a row!\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/docker-practice",
        "title": "KAllan's Telephone and Answering Machine Notes",
        "content": "\nSetup {setup}\n\nInstalling docker {installing-docker}\n\nI always like the DigitalOcean tutorials, so that's what I followed here. [Installing Docker on\nUbuntu 20.04](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04)\n\nOne note: I had to restart my computer instead of just logging out in order to get the docker group\nupdate to take effect.\n\nClone the repos {clone-the-repos}\n\ngit clone git@github.com:KAllan357/answering-machine.git\ngit clone git@github.com:KAllan357/telephone.git\n\nNothing special here.\n\nInstall Go {install-go}\n\nI just followed these instructions.\n\nDo the thing {do-the-thing}\n\nStart the answering machine outside of docker {start-the-answering-machine-outside-of-docker}\n\nRunning go run main.go seems to do a thing. And we get the 200 like the instructions say if you\ncurl it. Great, so it seems like we can expect the app to hang and just wait for requests. And to\nlog them when it handles them.\n\nStart the answering machine container {start-the-answering-machine-container}\n\nI need to build the thing first.\n\nMy docker build . hit this error\n\ndocker build .\nSending build context to Docker daemon  74.24kB\nStep 1/10 : FROM debian:wheezy\nwheezy: Pulling from library/debian\n2b15b7abe8b3: Pull complete\nDigest: sha256:2259b099d947443e44bbd1c94967c785361af8fd22df48a08a3942e2d5630849\nStatus: Downloaded newer image for debian:wheezy\n --- 10fcec6d95c4\nStep 2/10 : RUN apt-get update -y && apt-get install --no-install-recommends -y -q curl build-essential ca-certificates\n --- Running in 900695c2fa97\nIgn http://deb.debian.org wheezy Release.gpg\nIgn http://deb.debian.org wheezy-updates Release.gpg\nIgn http://deb.debian.org wheezy Release\nIgn http://security.debian.org wheezy/updates Release.gpg\nIgn http://deb.debian.org wheezy-updates Release\nIgn http://security.debian.org wheezy/updates Release\nErr http://security.debian.org wheezy/updates/main amd64 Packages\n\nErr http://security.debian.org wheezy/updates/main amd64 Packages\n\nErr http://security.debian.org wheezy/updates/main amd64 Packages\n\nErr http://security.debian.org wheezy/updates/main amd64 Packages\n\nErr http://security.debian.org wheezy/updates/main amd64 Packages\n  404  Not Found [IP: 151.101.66.132 80]\nErr http://deb.debian.org wheezy/main amd64 Packages\n  404  Not Found\nErr http://deb.debian.org wheezy-updates/main amd64 Packages\n  404  Not Found\nW: Failed to fetch http://deb.debian.org/debian/dists/wheezy/main/binary-amd64/Packages  404  Not Found\n\nW: Failed to fetch http://deb.debian.org/debian/dists/wheezy-updates/main/binary-amd64/Packages  404  Not Found\n\nW: Failed to fetch http://security.debian.org/debian-security/dists/wheezy/updates/main/binary-amd64/Packages  404  Not Found [IP: 151.101.66.132 80]\n\nE: Some index files failed to download. They have been ignored, or old ones used instead.\nThe command '/bin/sh -c apt-get update -y && apt-get install --no-install-recommends -y -q curl build-essential ca-certificates' returned a non-zero code: 100\n\nMy first thought is maybe it has to do with wheezy? So I dropped that tag and it seems to run\nfine. docker images showed me the successful build. Oh, I also bumped the go version because I\nnoticed my install grabbed v1.6 instead of v1.3. I sure that won't affect this exercise very\nmuch.\n\nmodified   Dockerfile\n@@ -1,11 +1,12 @@\n-FROM debian:wheezy\n+FROM debian\n\n RUN apt-get update -y && apt-get install --no-install-recommends -y -q curl build-essential ca-certificates\n-RUN mkdir /usr/local/go && curl https://storage.googleapis.com/golang/go1.3.linux-amd64.tar.gz | tar xvzf - -C /usr/local/go --strip-components=1\n+RUN mkdir /usr/local/go && curl https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz | tar xvzf - -C /usr/local/go --strip-components=1\n\nAh a simple docker run -it image id said it panicked because it's missing a config. So I'll add\nit like the other files.\n\n ADD messages.html /app/\n+ADD config.json /app/\n\nA rebuild and a run looks just like the it did when I ran the main.go, so\nlet's try a curl.\n\nIt failed. I need to expose a port.\n\nAdding a -p 8080:8080 seemed to do the trick and I got \"Jimbo's answering machine\". A quick ag\nsays that's from the config. Seems like the instructions are out of date, it references a line 54\nand an environment variable, but 54 is a blank line. And a config file controls the name now.\n\nI don't want to think too hard about this, so I'm moving on to the telephone. But first, I was able\nto get the container running in the background and tailing the logs.\n\ndocker run -dit -p 8080:8080 --name andy_am 94f348ecb597\ndocker logs -f andy_am\n\nStart the telephone container {start-the-telephone-container}\n\nNice, telephone's Dockerfile is super bare - literally empty. Since I pulled the debian image\nearlier, I thought I would use that as a base.\n\nSo I started with an interactive debian container to figure out how to install ruby and gems and\nwhatnot.\n\ndocker run -it debian bash\nroot@7c91165552bb:/#\n\nInstalling ruby was easy, and I got rubygems for free. Then installing a gem was easy. So I\nthrew all of that into the Dockerfile.\n\nmodified   Dockerfile\n@@ -1,12 +1,15 @@\n-# See the reference doc - http://docs.docker.com/reference/builder/\n+FROM debian\n+MAINTAINER luandy64\n\n-# FROM - what is the base image for this Dockerfile? http://docs.docker.com/reference/builder/#from\n-# MAINTAINER - who owns this Dockerfile? http://docs.docker.com/reference/builder/#maintainer\n+RUN apt update\n\n-# Install Ruby - perhaps from a package manager? http://docs.docker.com/reference/builder/#run\n+RUN apt install -y ruby\n+RUN gem install httparty\n\nNow I just need to figure out how to run the ruby file in the container. So first we need to get the\nruby file into the container. Taking inspiration from the answering-machine/Dockerfile, I made\nthese changes to telephone/Dockerfile\n\nmodified   Dockerfile\n@@ -1,12 +1,15 @@\n-# See the reference doc - http://docs.docker.com/reference/builder/\n+FROM debian\n+MAINTAINER luandy64\n\n-# FROM - what is the base image for this Dockerfile? http://docs.docker.com/reference/builder/#from\n-# MAINTAINER - who owns this Dockerfile? http://docs.docker.com/reference/builder/#maintainer\n+RUN apt update\n\n-# Install Ruby - perhaps from a package manager? http://docs.docker.com/reference/builder/#run\n+RUN apt install -y ruby\n+RUN gem install httparty\n\n-# Install the 'httparty' gem - how do you install gems? http://docs.docker.com/reference/builder/#run\n+RUN mkdir /app\n+ADD telephone.rb /app/\n\n-# ADD the telephone(.rb) application - http://docs.docker.com/reference/builder/#add\n\n-# Write a CMD - http://docs.docker.com/reference/builder/#cmd\n+WORKDIR /app\n+RUN ruby telephone.rb\n\nAttempting the build now results in a failure because the telephone.rb script is unhappy. So I\ncomment it out and try to iterate on it. Here's the error I see\n\nroot@c59f07ad8b04:/app# ruby telephone.rb\nTraceback (most recent call last):\n        12: from telephone.rb:11:in `main'\n        11: from /var/lib/gems/2.5.0/gems/httparty-0.18.1/lib/httparty.rb:631:in `post'\n        10: from /var/lib/gems/2.5.0/gems/httparty-0.18.1/lib/httparty.rb:524:in `post'\n         9: from /var/lib/gems/2.5.0/gems/httparty-0.18.1/lib/httparty.rb:594:in `perform_request'\n         8: from /var/lib/gems/2.5.0/gems/httparty-0.18.1/lib/httparty/request.rb:145:in `perform'\n         7: from /usr/lib/ruby/2.5.0/net/http.rb:1458:in `request'\n         6: from /usr/lib/ruby/2.5.0/net/http.rb:909:in `start'\n         5: from /usr/lib/ruby/2.5.0/net/http.rb:920:in `do_start'\n         4: from /usr/lib/ruby/2.5.0/net/http.rb:935:in `connect'\n         3: from /usr/lib/ruby/2.5.0/timeout.rb:103:in `timeout'\n         2: from /usr/lib/ruby/2.5.0/timeout.rb:93:in `block in timeout'\n         1: from /usr/lib/ruby/2.5.0/net/http.rb:936:in `block in connect'\n/usr/lib/ruby/2.5.0/net/http.rb:939:in `rescue in block in connect': Failed to open TCP connection to localhost:8080 (Cannot assign requested address - connect(2) for \"localhost\" port 8080) (Errno::EADDRNOTAVAIL)\n\nMy first thought is maybe it doesn't want localhost but will take 127.0.0.1. But that results in\na similar error. So I just tried the IP address of the answering-machine container. That worked, but I wanted\nto make it configurable annd based on an environment variable.\n\nAfter looking up how to grab env vars in ruby, I modified telephone.rb for real and rebuilt the\nimage.\n\n-# FIXME\n-url = \"http://localhost:8080/messages\"\n+url = \"http://#{ENV[ANSWERINGMACHINEHOST]}:8080/messages\"\n\nIt kept erroring on me, but I realized that I was calling RUN ruby telephone.rb instead of\nCMD ruby telephone.rb. So let's make that change now.\n\n-RUN ruby telephone.rb\n+CMD ruby telephone.rb\n\nIt builds successfully now, but if I run the image I get an error about some constant ANSWERINGMACHINEHOST.\n\nHa, you have to quote keys for maps. Duh.\n\nurl = \"http://#{ENV[ANSWERINGMACHINEHOST]}:8080/messages\"\nurl = \"http://#{ENV[\"ANSWERINGMACHINEHOST\"]}:8080/messages\"\n\nI learned that ruby has a \"safe get\" from a map too. So I used that to set values for the sender and\nmessage.\n\n-# FIXME\n-sender = \"Telemarketer Bob\"\n+sender = ENV.fetch(\"SENDER\", \"Telemarketer Bob\")\n\n-# FIXME\n-message = \"I have a credit card offer you can't refuse.\"\n+message = ENV.fetch(\"MESSAGE\", \"I have a credit card offer you can't refuse.\")\n\nFinally, the exercise mentions linking two containers. Since I already named the answering machine\nandy_am, I start the telephone with\n\ndocker run -it -e ANSWERINGMACHINEHOST='andyam' --link andyam 80ad0c4699d8\n\nAnd we can check the logs of the answering machine with\n\ndocker logs -f andy_am\n\nAnd with that I'm calling it done.\n\nReflection {reflection}\n\nI think this exercise showed me that I know more about Docker than I give myself credit for. Also,\nwhile I don't have the specifics of \"my docker workflow\" nailed down, my goal to always shrink the\niteration loop seems like a helpful approach. In this case, it led me to stage the container exactly\nhow I want it, but then I can run various commands iteractively to solve the problems I'm having.\n\nI didn't know the difference between RUN and CMD in a Dockerfile. But it has completely\ndifferent outcomes on the build process. But just being me, I commented out the RUN to let the\nimage build successfully. Then I ran the container and iterated on the bug until I solved it. It's\nthe same process I used to install ruby on the container in the first place.\n\nThis is also a good example of how learning one language makes it easier to learn other languages. I\ndon't know ruby. But by knowing python, I quickly troubleshot:\n\ninstalling a gem: since gem is to ruby as pip is to python\naccessing environment variables from the script: I knew there would be an object of some king,\n    hopefully a map. But it was also a simple google search\nusing a \"safe get\" on a map: this one felt like a bigger stretch in my mind, but it was also just\n    a quick google search\n\nThere was a moment when I debated whether I should even bother with all of this ruby. The goal of\nthis exercise is to see what I know about docker, not ruby. And given that the telephone.rb file\nis so simple, I debated just translating it straight to python (or even curl). But actully,\nbecause it was so small and the idea of the program is so simple, I chose to stick it out.\n",
        "tags": [
            "docker",
            "golang"
        ]
    },
    {
        "uri": "/cappucchino/dual-monitor-setup",
        "title": "Dual Monitor Setup",
        "content": "\nToday was a lot of fiddling with xrandr in order to get my laptop screen and\nexternal monitor to play nice together.\n\nWhile it was a bit confusing at first, the [article on ArchWiki about\nHiDPI](https://wiki.archlinux.org/index.php/HiDPI#Side_display) was very useful.\nThere wasn't a command on the page that was exactly what I needed, but between\nthe wiki and the man pages, I was able to piece together what I needed.\n\n!--more--\n\nHere's how I figured out the numbers I needed to create a HiDPI display and a\nnot HiDPI display that sit next to each other. My exact setup is as follows:\nMy primary display is named eDP-1, has a resolution of 2560x1600, and a\n  DPI of 227 pixels per inch\nMy other display is named DP-1, has a resolution of 1920x1080, and a DPI\n  of 166 pixels per inch\nI want my other display to the right-of my primary one\n\nTo get the DPI of my displays, I used this site, and just\nopened it in Chrome on each monitor.\n\nTo get the resolution of my displays, xrandr will tell you that if you just\ntype xrandr into the terminal. It displays a little * next to the\nresolution. This is also how I got the name of each display too.\n\nFrom the ArchWiki, I grabbed the following formula:\nxrandr --output eDP-1 --auto --output HDMI-1 --auto --panning [CE]x[DF]+[A]+0\n--scale [E]x[F] --right-of eDP-1\n\nI had to make the following modifications though:\nxrandr --dpi 227 --output eDP-1 --auto --output DP-1 --auto --panning\n3840x2160+2560+0 --scale 2x2 --right-of eDP-1\n\nHere's what those changes mean:\n--dpi 227 is the higher DPI value between the two monitors I am using\n--output DP-1 was changed from --output HDMI-1 because that's what my\n  display is named\n--panning 3840x2160+2560+0 uses the following values for A,C,D,E,F:\n    A: 2560 (width of the primary display)\n    C: 1920 (width of the other display)\n    D: 1080 (height of the other display)\n    E: 2 (width scale factor)\n    F: 2 (height scale factor)\n--right-of means DP-1 should go on the right of eDP-1\n\nThe --panning was super helpful because otherwise, there's a bug in xorg\nthat makes it so you can't reach half of the other display. It's going to be\nfixed in xorg 1.20, which is coming with Ubuntu 18.10 I think.\n\nIn the mean time, --panning works great. Also, the scaling was a bit arbitrary\nI think, but --scale 2x2 was a result of trial and error and it looks great.\nTo my understanding you can do decimal values, which I didn't experiment with.\n\nThe last thing to do with all of htis is to throw my modified command into a\nshell script and thell i3 to run it on startup.\n\nOh and this whole xrandr thing has messed up the wallpaper of my other\ndisplay. I think it's definitely the scale option, but I'll either fix it\nanother day by tweaking the i3 settings or I'll find a tiliing wallpaper. \n\nWith that, I am almost done tweaking this Ubuntu install! Things are coming\nalong pretty nice. \n",
        "tags": []
    },
    {
        "uri": "/cappucchino/emacs-allows-elisp-in-find-replaces",
        "title": "Emacs Allows elisp in Find Replaces",
        "content": "\nProblem\n\nYou have a massive list of tuples (like 800 tuples) and you need to increment the number of one slot in the tuple.\n\nStart with this:\n(1, a), (2, b), (3, c), (4, d), (5, e) … (400, aaabbbccc)\n\nBut you want:\n\n(2, a), (3, b), (4, c), (5, d), (6, e) … (401, aaabbbccc)\n\n Solution\nquery-replace-regexp in emacs allows you to run any elisp you want on the match.\n\nM-x query-replace-regex from  (\\([0-9]+\\)  to (\\,(+ 1 (string-to-number \\1))\nemacs is backwards from every other regex engine. ( is match a literal paren. \\( … \\) is a capture group.\n\nSo then the replace is:\nadd a literal paren\n\\, to start writing elisp\n(+ 1 (string-to-number \\1))\n",
        "tags": [
            "emacs"
        ]
    },
    {
        "uri": "/cappucchino/first-blog-post",
        "title": "First Blog Post!",
        "content": "The title says it all!\n\nI finally got this site up and running. I could not have done it without a lot\nof googling and stumbling upon Jekyll.\n\n!--more--\n\nI hope to add more to this site as time\nmoves on. For the rest of this break, I hope to get a good amount of work in.\nHowever, once the semester starts up again, I know things will get busy and\nwork here will slow down.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/from-jekyll-to-hugo",
        "title": "From Jekyll to Hugo",
        "content": "Some Background\nIt's a new month, and so I have some new goals. One of them is to try and use my\nwebsite more- and by that I mean blog more. I like the idea of documenting bits\nof every day so that in the future I can come back, look at these posts and\npiece together how much I've changed and whatnot.\n\n!--more--\n\nSo to kick off trying to blog more, I decided to try and fix some of the pain\npoints I was having with my site now. I've been doing a bit of research into\nstatic site generators, and decided that maybe using Hugo would be fun. A\nlong-ish term goal of mine is to dive into Golang a bit, so maybe this can be a\ngood way to dip my toes in the water.\n\nI'm planning on doing a more thorough write up of my thoughts on this in the\nfuture, so let's move on to what I did today.\n\n Setting up Hugo\nSo on my Mac, it's quick and easy to install Hugo. I just ran brew install hugo.\n\nFor my theme, I looked through all of my options on [Hugo\nThemes](https://themes.gohugo.io) and decided to go with the Hyde theme. I'm a\nbig fan of the two colomn design, where one column serves as a header. I'd like\nto write my own theme one day because I am also a huge fan of card-based\nelements and I haven't seen a theme that does it yet.\n\nAfter setting up the theme, there was nothing left to do but to layout how I\nwanted the sitemap to work. I quickly figured out how to add links to the\nsidebar using the method the theme writer(s) intended. The hardest part of what\nI did today was to get the individual pages to be structured the way I wanted\nthem to be. Using Jekyll, it was easy because you put it in the front matter or\njust straight up work an index.html file. I dug through the Hugo Docs and\nfound that Hugo really leans on the structure of the directory your site is\nsitting in. So I made all of the appropriate directories in the /layouts\nfolder, peeked at the Hyde theme folder to get the correct file names, and\nmade the appropriate list.html and single.html files.\n\nMoving forward\nNext steps are probably to get the CSS set up how I want it. Then I'll work on\nporting over old blog posts and fleshing out the About Me section. I haven't\ntried to set this up on Github yet, but I've seen instructions for it, and it's\nnot too scary looking.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/future-blog-ideas",
        "title": "Future Blog Ideas",
        "content": "\nHere's just a running list of things I want to write down thoughts about.\n\nbabashka CLI design\ntraefik as a reverse proxy for tailscale services\napps and tools I use\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/git-submodules",
        "title": "Git Submodules",
        "content": "\nThe first time I learned about git submodules was actually from working with\nhugo.\n\nThe documentation used to describe how you can have your main branch live\nin a directory that points to a diffent origin than your current branch.\n\nIt's a cool feature that I never remember how to use, so here are notes I took\nafter rediscovering it recently.\n\n---\n\nTo add a submodule\n\ngit submodule add https://github.com/some-other-repo\n\nTo clone a submodule locally\n\ngit submodule update\n\nTo remove a submodule\n\ngit rm path/to/the/submodule\ngit commit -m 'Removed a submodule'\n\n---\n\nRelated to the use case described by the hugo docs, git worktree can also\nmake another branch live in a directory.\n\nTake the repo I use to manage this site, for example. I want to write on the\ndev branch, so my repo is checking out dev most of the time.\n\nBut hugo builds to a folder called public. And I want all of the contents of\npublic to be the stuff that lives on my master branch. So all I have to do\nis add a worktree in my directory under the name public. That makes the folder\nexist as master, so then every time hugo builds and changes something in\nthere, I just add everything and commit to deploy the site.\n\n[1]: https://gohugo.io/\n[2]: https://github.com/gohugoio/hugo/blob/e48ffb763572814a3788780bb9653dfa2daeae22/content/en/hosting-and-deployment/hosting-on-github.md#step-by-step-instructions\n",
        "tags": [
            "hugo",
            "git",
            "golang"
        ]
    },
    {
        "uri": "/cappucchino/hello-2019",
        "title": "Hello 2019",
        "content": "\nThis post is really just a bookend for this blog. \n\n2018 marked the end of my academic career and the start of my journey as a\nsoftware engineer.\n\n!--more--\n\nSome intentions for this year\n\n Writing more\n\nLast night while I was figuring out how to blog again, I was pleased to find\nthat I really do enjoy maintianing this site. This is perfect because I plan to\nuse it more to capture things I learn on a weekly basis. Really, I just plan to\nuse it more in general.\n\nThe schedule and format of it all is still up in the air right now. That might\ncome back to bite me in the butt as far as accountability goes, but we can deal\nwith that problem if/when it gets here.\n\nReading more\n\nThanks to a nice perk at work, I have grown my library of technical books a bit.\nIdeally I would be able to read them all this year. That doesn't seem like a\nvery attainable goal however, so I'm starting small.\n\nHere's the list:\n\nDesign It! From Programmer to Software Architect by Michael Keeling\nThe Go Programming Language by Alan A. A. Donovan and Brian W. Kernighan\nGetting Clojure by Russ Olsen\nFluent Python by Luciano Ramalho\nThe Rust Programming Language by Steve Klabnik and Carol Nichols\n\nWhile these are the ones I'm actively trying to read this year, I'm sure others\nwill sneak in or some of these may be dropped.\n\n The Whys\n\nAs I've learned while working on projects at work, documenting the reasoning\nbehind a decision is more important than documenting how something is done. \n\nThe writing\n\nThe past has shown that I'm pretty bad about sticking to a writing schedule.\nWhile this is just another attempt at finding something that works for me, I am\nalso interested in capturing my professional growth over time. There's so much\nthat I'm learning at work and it's hard to keep track of it all. A trick I\npicked up in undergrad though, is to reflect on the new piece of knowledge you\njust acquired and that helps it to stick in your memory. Just a few sentences\nabout it documenting questions or comments and hopefully in a year, I can see\nthe evolution of my understanding of a variety of topics.\n\n The reading\n\nDesign It! calls itself a good introduction for people new to software\narchitecture. Being a topic I have very little familiarity with, that's a good\nenough reason for me to just pick up a book and see what it's about. In general,\nI'm not a fan of doing things without a little background knowledge first. So\nwhen I read the book's introduction, I was convinced this book would at least\ngive me the vocabulary to communicate effectively at work.\n\nFluent Python is aimed at people wanting to be proficient at Python 3. It's a\ngiant book, but I've learned quite a bit from it already so I'm excited to\ncontinue chipping away at it this year. I'm hoping this book is the first step\nin my journey to becoming a Python guru. It's a really cool language, but it's\ntainted by people dragging over their habits from other languages.\n\nGetting Clojure intrigues me because of a stellar review from a coworker. I'm\nroughly half way through the book already and I'm a fan of the author's writing\nstyle. One of my favorite lines is in the intro: \"This book is for people with\nsome programming experience... who want to learn Clojure. Notice I didn't say\nlearn to program in Clojure**. This book really feels like a conversation with\nOlsen as opposed to a dry introduction to functional programming ideas and\nClojure syntax. The most important reason I picked up this book is because\nPython and Clojure are the two main languages at work. So I want to at least be\nfamiliar with Clojure sooner rather than later.\n\nGo has intrigued me for a while now. There's a story that I vaguely remember\nhearing when I first heard about its existance; something like a group of (well\nknown) engineers at Google threw together a language because they were\nunsatisfied with the ones they were using. Plus they had some downtime while a\nproject was compling, so a faster language was needed. I have no clue if any\npart of that is true, but it's cool enough that I want to learn more about Go.\nOn top of that, since I'm using Hugo to generate this site, I thought it would\nbe neat to learn a bit about what happens under the hood. I was actually reading\nthe first chapter yesterday and it's been a pretty good read so far.\n\nRust is very much related to C++ in my head, which I've been feeling out of\ntouch with lately. It's hard for me to think outside of Python and I really want\n(and should and need) to change that. So to see more of how languages do things\ndifferently and to get back in touch with working with a lower-level, compiled\nlanguage, I picked up this book (and the Go book).\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/higher-order-functions",
        "title": "Higher Order Functions",
        "content": "I've been reading \"Eloquent JavaScript\" by Marijn Haverbeke lately and today I\nrediscovered the idea of a higher-order function. I first encountered these in\nthe freeCodeCamp curriculum, most likely, but I only glanced over them at the\ntime. \n\n!--more--\n\nReading about it today though, everything clicked. \n\nIn JavaScript, you can declare a function in three ways.\n\nlet func1 = function(arg1){\n  console.log(\"func1 called with\", arg1);\n};\n\nfunction func2(arg1){\n  console.log(\"func2 called with\", arg1);\n}\n\nconst func3 = arg1 = console.log(\"func3 called with\", arg1);\n\nThe cool thing though is that through a mash up of these methods, you can define\na function that creates other functions. An example makes this easier to \nunderstand:\nfunction plusNum(num){\n  return ans = ans + num;\n}\n\nlet plusOne = plusNum(1);\nlet plusTwo = plusNum(2);\n\nThe Mashup\nUsing the func2 way of defining a function, we define a function plusNum.\nIt's super straight forward, it just returns a function definition in the \nfunc3 style, which you probably recogize as an arrow function. \n\nTime for the crazy part: we want to define a new function, plusOne. The\nfunc1 style showed us we can let a variable take on a function definition as\nits value. Since plusNum() returns a function definition, after we give it a\nparameter of course, that means plusOne is a function in the func1 style of\ndoing things!\n\n A less wordy, more concrete explaination?\nLooking at let plusTwo = plusNum(2). Let's start with the right side. We call\nplusNum and give it a parameter 2. That returns a function, \nans = ans + 2. We store this nameless little function in plusTwo, \ncompletely legally because function definitions are allowed to be the \"value\"\nfor a variable. Done.\n\nToo. Cool.\n\nI don't know what you would really do with this though. I've never had to\ncustomize functions like this before. At least I understand it now.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/how-i-start-a-project-part-1",
        "title": "How I start a project Part 1",
        "content": "Scratching my head thinking about what I want to write about today, I started\nskimming other blogs to get a sense of content and blogging frequency. Daily\nblogging might be too much to be sustainable over time, but my rationale is I\nlearn something almost every day, so that's what I'll write about.\n\n!--more--\n\nToday, I'm documenting my process of planning a project.\n\nSo I've been working through freeCodeCamp's certificates. As of today, I only\nhave the JavaScript Data Structures and Algorithms one done. I'm about half\nway through the Responsive Web Design certificate.\n\nWhile working on the RWD cert, I've realized that I spend too much time trying\nto make things perfect and that hinders my progress. Switching to the thought\nthat things just need to be \"good enough\", I was able to finish the previous\nsite, the Product Landing Page. It still needs some tweaks, which I got from\nfeedback from the forums, but at least it's out there.\n\nSo here's my first stab at the Technical Documentation Page.\n\n My background noise of choice lately has been \"Mellow Beats\" or \"Chill Lofi\nStudy Beats\" on Spotify. Find those in \"Genres & Moods\"  \"Focus\".\n\nNow taking a look at the user stories, which comes from Agile if you are new to\nthat term. A quick and dirty definition is something an end user can notice\nabout the app/product. Here's the list for the\nTechnical Documentation Page.\n\nReading this document, I like to do a quick skim through first. In this pass\nthrough, I'm just getting a sense of how things should be laid out. There's no\nneed to get bogged down by what id's are required, or what the styling needs\nto look like.\n\nHere's what caught my eye reading through this:\n\nThere's a main element\nThere are several section elements\nSomething something header\nI was told how to name some id's\nSomething something content...\nNeed a navbar\nNavbar needs links (I'm not sure what else would go there...)\nNavbar goes on the left and is always visible to a desktop user\nUse a media query\n\nThere's not really a reason for me to write any of this down right now. I can\nalways just refer back to the document if I need it.\n\nNow I need some visuals though. Luckily, freeCodeCamp always gives you a link\nto an app that is more or less what you are looking to rebuild. So I follow the\nlink and poke around the app. Here it is if you want it.\n\nFirst thing I notice is it is plain! No worries though because I will style it\nmyself. My first idea as far as styling goes is to make the navbar darker than\nthe content. Hopefully that makes it pop and draws your eyes there. I also like\nthe giant headings there are using here, so I'll keep that in mind.\n\nSo after clicking around for a little bit, it's clear that this one is pretty\nstraight forward: make a site with a fixed navbar and links that go to certain\nsections of the overall page.\n\nThis is great, I'm off to a good start. I have a sense of the structural\nrequirements. I also have an idea or two for the visual component.\n\nPutting pen to paper\nDepending on my mood, this next step varies. I could be really inspired by a\nsite already and want to plan out my layout and styling for 3 viewports\n(Desktop, tablet, and tiny phone). Or I want to think about the structure by\ndigging into the User Stories again.\n\nToday is a structure kind of day, but who knows, I might get to the layout and\ndesign too.\n\n My Approach: Structure\nI've found that mind maps are a pretty good way to think about the structure.\nSomewhere on a piece of paper- I use paper because in the last 4 years of\ncoding, I have learned the hard way that I need to slow down with some paper\nfirst or risk hours wasted on reworking my code repeatedly. So somewhere on\nsome paper, I'll start with an HTML \"node\" at the root of the graph. From\nthere I link to it exactly like I would write my HTML file: there's a Head\nnode and a Body node. The Body gets two children as well: Main and\nFooter. You get the idea. Branch out until the User Stories are all covered.\nMy system is nodes are circles, representing actually blocks of HTML. Lines\ncoming off a node without a circle are properties or attributes about that node.\n\nFor example, the Main node can have three Section nodes coming off of it.\nEach of these Sections get a line coming off of it for an id, or classes\nif I'm ready for that, etc. Again, the point of this part is to get a visual\nrepresentation of the HTML I will write that covers the User Stories that it\ncan.\n\nTime to fill in the details!\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/how-to-write-a-handwritten-page",
        "title": "How to Write a Handwritten Page",
        "content": "\n\nI lean on two shortcodes to create these pages.\n\nThe =figure= code\n\n#+begin_src go\n  {{}}\n#+end_src\n\nAnd if I need links, the =hand-link= code\n\n#+begin_src go\n  {{}}\n#+end_src\n\nTo generate the CSS for the links,\n- upload the image to https://pixspy.com/\n- right click to make a selection for where the link should go\n- open the dev console and paste the following code\n\n#+begin_src js\n  var [_, ix, iy] = $('.FileDetails-details')[0].textContent.match(/(\\d+) x (\\d+)/);\n  var [_, dx, dy, sx, sy] = $('.Selection-summary')[0].textContent.match(/(\\d+) x (\\d+) @ \\((\\d+), (\\d+)\\)/);\n  [ix, iy, sx, sy, dx, dy] = [ix, iy, sx, sy, dx, dy].map(x => parseInt(x));\n  console.log(`left: ${(100 * sx / ix) + 3.5}%; top: ${100 * sy / iy}%; width: ${100 * dx / ix}%; height: ${100 * dy / iy}%;`)\n#+end_src\n",
        "tags": [
            "written-in-org-mode",
            "meta"
        ]
    },
    {
        "uri": "/cappucchino/hugo-brainstorming",
        "title": "Hugo Brainstorming",
        "content": "\nToday was a lot of interview prep. That's great because I like the\nself-reflection time, but it doesn't leave too much time to work on these side\nprojects. \n\nIn the spirit of documenting my process of thinking and working, I want to talk\nabout how I'm going to tackle the next step of this Hugo migration.\n\n!--more--\n\nThe problems I'm facing, in no particular order, are:\n\nI need to change the front matter from how it is to something more consistent\n  for Hugo. Not all of my posts are consistent, but I can easily make it so\nOne pet peeve of of mine is the way images are handled in Markdown.\n  For one, it jacks up my file format/layout because sometimes the image is\n    inserted at the end of a line and I haven't explored how to wrap the line to\n    my desired 80 characters. Perhaps it really isn't a problem and I just need\n    to read some documentation. But it's on my mind\n  The way I would like to handle it is to reference some variable name in my\n    Markdown, which is then processed later to be replaced by the properly\n    formated img tag and whatnot. Each blog post already stores some\n    metadata about itself; moreover, it's in a key:value sort of thing with\n    YAML, so how hard can it be to say \"If you see this key in the Markdown,\n    then swap it with the img where the source is the value\". I did a tiny\n    bit of research and it sounds like this feature is possible with something\n    called shortcodes. I'll look into and you'll find me writing about it in a\n    few days, I'm sure\nI need to figure out how to restructure my posts to match the \"Hugo way\". I\n  know that Jekyll was very very very flexible with whatever I threw at it. And\n  I've read that Hugo is pickier. So I need to make this transition work and\n  work properly so that I'm not fiddling with this down the road\n    Disclaimer: It's not that I don't like fiddling with this site. It's\n      literally one of the main reasons it exists. Heck, my love of tinkering is\n      what drives this migration in the first place. I have enough experience\n      with these static site generators that I'd like to make sure I do things\n      right from now on. I'm done with the \"I'm learning and let's just get this\n      functional\".\n      \nSo to fix that front matter issue, I'm definitely writing a script to do it. I\nhave just enough blog posts to say, no way I'm not doing this by hand. I've\nthought about 7 steps that the script should take:\nRead in the current front matter\nCompare it to my \"ideal list\" of key-value pairs and keep the good ones\nAdd the missing ones with default values I need to go in and change\nAdd the filename to some list that tells me to look at some thing\nAlso note which files have an image in them\nMake a new file containing the new front matter and the old content\nPut this new file in some target directory\n\nThe code will definitely look like: for every file in my /posts folder, do the\nthing. \n\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/i3-and-hugo-updates",
        "title": "i3 and Hugo Updates",
        "content": "\nHugo Updates\nI spent a nice chunk of today figuring out what I wanted to do as far as styling goes. The theme I picked, Hyde, was did a \nmajority of the work already. \n\n!--more--\n\nI just had to hook into the snippet of HTML that defines the head and add my own stylesheet. From there, the only change I \nwanted to make was making everything a card. But then that led to some padding issues, so I patched that really quickly.\n\nOverall, I'm really satisfied with the design. Now I just have to move over all of the pages and blog posts. I learned that I \nwas pretty inconsistent with the front matter I included in the blog posts. I'll just have to go back and clean things up. I \nwill probably automate the adding and removing of the keys, but will have to add the values afterwards. \n\n i3 Updates\nI've been gluing together bits and pieces of various configurations to get i3 to work. Some parts were quick:\nThe background was straight forward\nSetting up my workspaces was easy\n  Though, I haven't bound certain applications to my named workspaces yet\nInstalling Font Awesome was much easier than Source Code Pro. I might have to find an alternative here. It's mainly for   \n  Spacemacs, but it seems to function fine without it.\nI've themed i3 to match the Nord Theme for Spacemacs\n\nThe only- what I would call- dire issue is I can't get the brightness control to work. So as I sit here and type this, there's this blindingly bright screen that I'm forced to look at and can do nothing about. \n\nNext Steps\nI put some config stuff from my Mac onto Github, but I later learned, I didn't put some of the files I needed. I'm hoping to \nfinish up with all of this i3 stuff soon and I can throw all of those files up too. I think a really nice guide is due too \nbecause I wouldn't want someone else to try and do the same thing here and be as lost as I was.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/installing-ubuntu",
        "title": "Installing Ubuntu",
        "content": "\nI probably should've written this while I was doing the install. Oh well, maybe\nnext time.\n\nI managed to get Ubuntu installed on an external hard drive today. The problem\nstarted with me trying to figure out if I could resize the dual boot set up I\nhave on my Macbook. Reading through my options, I decided it was too hard and I\nhad other things to do- like work on my Hugo migration from yesterday.\n\n!--more--\n\nThen I thought, \"Oh, well I have a spare external drive, I wonder how easy it\nis to install an OS on there\". A quick search led me to\nthis video, and with a few\nmodifications, I was up and running.\n\nHere's how I did it (More detailed instructions are in the video, I'm writing\nthis from memory):\n\nDownload an .iso file. I got mine from the Ubuntu site.\nFlash it to a USB drive using Etcher\nInsert the USB,restart the Mac, holding Alt when it boots up, and boot to\n  the live USB you just made\nOpen a Terminal and type sudo gparted\nInsert the external drive\nChange the drive you are looking at to the external drive\nPartition the drive into whatever sized chunks you want, as long as the\n  following are satisfied:\n     The \"Main\" partition should be formatted to Ext4 Linux Journaled\n     Mount this \"Main\" partition on /\n     Make a smaller partition formatted to Linux swap, it should be about\n       4GB (That's what the guy in the video did, I've heard there's a lot of\n       debate about how much swap space you should have. I went with 4GB to\n       keep things simple)\n\nAt the bottom of the GUI, there's a drop down menu for where the boot loader\n  should sit. Give it the option of wherever your external drive is mounted,\n  but the option with no numbers at the end. It will look something like /sdd\nRun the partition\nClose the windows and open up the Install Ubuntu wizard that's sitting on\n  the Desktop\nRun through the wizard until it asks how you want to install Ubuntu, pick\n  the Something else option\nPick your external drive as where you want Ubuntu to be installed. Double\n  check you picked the right one, or else you risk losing data\n... Finish the wizard and reboot your computer, loading up your new Ubuntu\n  installation\n\nI think that's all of the steps. From there, do what you normally would do and\nrun updates, install new software, pick out a theme and some icons.\n\nI've been in this rabbithole of picking a new Desktop Environment. After going\nthrough a ton of posts on the very SFW\nr/UnixPorn, I decided to go with i3.\nI'm still not sure about how to use a lot of things. Maybe 30 minutes before\nwriting this post, I figured out how to switch workspaces.\n\nSo tomorrow will probably be real work, but later this week, I'll detail all\nof the stuff I've been downloading and configuring. And at some point I'll have\nto delete the Ubuntu that I'm dual booting too. Fingers crossed that I get it\nright and don't delete my Mac partition- I sadly can't say I haven't done that\nbefore. But hey, that's what backups are for!\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/its-live",
        "title": "It's Live",
        "content": "\nAfter a few hours of work, I was able to get the bare minimum of this site\nrewritten for hugo. I'll work on finalizing the /home and /about pages\nslowly but surely; for now though, I am more than satisfied with just having the\nblog up and running.\n\n!--more--\n\nWhile I was working on the migration, I read up on some things I would like to\nincorporate some day:\n\nHugo has support for Emacs users to write the pages in Org mode. That's\n  exciting to even just try out for an article or two; especially considering\n  that at some point I was trying to write a Python script to change an org file\n  to markdown for Jekyll.\n\nA goal I've had in the start is to write the site from scractch, and that goal\n  has been reinvigorated with this migration.\n\nSome hiccups I encountered along the way:\n\nI glossed over the one line in the Hugo Documentation that was like \"User\n  pages have to have the files for the site on the master branch\". I read that\n  after I learned about setting up multiple working trees and put all of my\n  files in a gh-pages branch.\n    No worries, I just swapped the two branches essentially. So master holds\n      the Hugo generated website files, and my dev branch holds the files that\n      generate the files that need to sit in master.\n\nThere was a path issue in linking the CSS files. In the config you can set the\n  baseURL of the site, and in the theme I am using, the author references that\n  variable directly, like so: {Site.baseURL}css/nameOfStylesheet.css. You get\n  the point. Naturally, you would think to set the `baseURL=\n  https://luandy64.github.io/`. That way when it is referenced later, I get a\n  properly formed url to the CSS file.\n     Right now, the 'baseURL' lacks a trailing /, and I edited the theme to\n       include the / between {Site.baseURL} and the rest of the path to the\n       stylesheet. I plan to look into what is considered the better practice,\n       but for now, it works as is.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/leiningen-local-installs",
        "title": "Leiningen Local Installs",
        "content": "\nYou can quickly create a new library with =lein new default my-library-name=.\n\nBut if you add a =group-id= to that, =lein= is smart enought to just use the =artifact-id= for the\ndirectory name, but the full maven id when installing to your local repository.\n\nI thought I was having issues with using =my-library-name= vs. =dev.andylu/my-library-name=, but I\ncan't reproduce the weird behavior now.\n\nSo I'm going to chalk it up to the usual \"I don't own the =~/.m2= folder\" and just run =sudo chown\n-R \"$USER\":\"$USER\" ~/.m2= and forget about it.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/lessons-about-github-pages",
        "title": "Lessons About Github Pages",
        "content": "I woke up today and thought, \"I should put some work into the Technical\nDocumentation Project\". It's a lazy, easy-going Saturday: the perfect time to\nput in about an hour of work or so and go from there.\n\n!--more--\n\nI filled up my water bottle, threw on my headphones, went to Spotify to play\nsome music- today was an I The Mighty kind of day- and got straight to work.\nI started with some styling that was giving my trouble yesterday: I couldn't get\ncode blocks to render how I wanted them to. Today? No issues at all, I got\nit with minimal effort.\n\nFrom that moment on, every task I wanted to complish would just get done. I get\nto a point where I felt like the site was done, so I peeked at the clock.\n\n2:27PM\n\nHoly cow, it's been like 3 hours! I didn't care though, I finished the project.\nThe trouble began when I wanted to host it on Github Pages.\n\nBreaks are important\nHosting a website on Github Pages is not hard. It's a really wonderful thing in\nmy opinion. You just have to remember to do the right things and everything will\nwork! (Great advice, I know).\n\n Here's what I did\nI created a new repository on Github\nI cloned it to my computer\nI copied in some files generated by Jekyll from a different project that I\n  also want to host on Pages one day\nI edited some files:\n     _config.yml: to change the title of my site to the name I want\n     _layout/default.html: this is where I copy in the HTML I wrote for this\n       project\n     _sass/minima.scss: this is where my styling goes to override the\n       default theme for a Jekyll site\n     assets/js: I don't think I've written JavaScript for my sites before,\n       but this is where it goes for Jekyll to put it in the right place\nI committed everything and pushed to Github\n\nCan you see where I went wrong in the list of things I did? It's a wonderful\nlearning experience that I hopoe you never experience yourself. I think if I had\ntaken a break after finishing the project, I would've caught the error sooner.\nOr not, I'm still new at this and make tons of mistakes with Jekyll.\n\nHere's what I forgot\nI didn't change the baseurl option in the _config.yml file. The site was\nloading just fine on Github, minus the fact that no styling was being applied.\nAfter messing with the stylesheet link for a while, I got it to take on the\nstylesheet from my main site.\n\nThat's when it clicked: I needed the stylesheet found in the subdirectory for\nthis particular project, but I wasn't saying that in the HTML file.\n\nYou can bet that I am never making this mistake again.\n\n How to Set Up a Project on Github Pages\nAssumptions\nYou have a \"main\" site set up there already\nYou have Jekyll properly set up locally. If not, here are the\n  instructions\nYou have some HTML+CSS+JavaScript you are trying to host\nYou know some basic command line commands\n\n Procedure\nI am a fan of setting up the local development before pushing stuff to Github,\nso you'll need to run\njekyll new projectName\ncd projectName\nto set up a new Jekyll project and change into that directory.\n\nNext, we'll set up version control by running git init.\n\nAdd a .gitignore\nBefore we do an initial commit we have some preliminaries to take care of.\nLet's set up a .gitignore. Here's what mine looks like because I'm on a Mac:\n.DS_Store\nGemlock.file\n_site\n.sass-cache\n\n Edit _config.yml\nNow we'll edit two of the files Jekyll gave us. Starting with _config.yml,\nopen it in the editor of your choice. Change these to whatever you want:\ntitle\nemail\ndescription\ntwitter_username\ngithub_username\n\nPay attention to baseurl and url!\nurl will likely be the custom domain you set up for your Github Pages. Or it\n  will be yourUserName.github.io.\n    If this is your main site, I would definitely fill in this line.\n    If this is a \"side project\", so not your main repository where a Pages\n      site is already up and running, you can leave this as url : \"\"\nbaseurl\n    If this is your main site, my advice is to set this a baseurl : \"/\"'\n    If this is a \"side project\", set this as the repository name, exactly how\n      it appears when you go to github.com/myUserName/someRepo. So it should\n      look like baseurl : \"/someRepo\"\n\nSave the _config.yml file.\n\nEdit the Gemfile\nMoving on to the Gemfile, open it up in an editor.\nFind the line that starts with gem \"jekyll\" and just add a `` in front to\n  comment it out\nFind the line that starts with gem \"github-pages\" and uncomment that line\n\nSave the Gemfile file and run the following in the command line:\nbundle update github-pages\nThis should make your local environment match the build environment on Github.\n\nTime to turn our atttention to adding the files for the site.\n\nA quick note, I like using .scss files, but I'll include directions for plain\n.css as well. We'll start there actually.\n\nAdding CSS or Sass files and JavaScript\n CSS + JS\nCreate some folders for your .css and .js files:\nmkdir ./assets\nmkdir ./assets/css\nmkdir ./assets/js\nSass + JS\nIf Sass more of your style, do this instead:\nmkdir ./assets\nmkdir ./assets/js\ntouch ./assets/main.scss\nmkdir ./_sass\n\nGo ahead and place your CSS/JS/SASS files in their respective homes.\n\nFor the Sass people, open the assets/main.scss file we created earlier and\nadd:\n---\n---\n\n@import \"minima\"\n\nI'm pretty sure the @import is for whatever your Sass files are named and if\nyou have multiple in the _sass folder, import them in this file. In the\nJekyll Docs,\nit says to override the default theme by creating similarly named files in our\nproject. Read them for yourself and let me know if doing this in the best way.\n\n Adding HTML\nMoving on to the HTML files, go back to the root of the project and add:\nmkdir ./_layouts\ntouch ./_layouts/default.html\n\nCopy your HTML into the default.html file.\n\nBefore we can see your HTML render, we have to edit /about.md or /index.md,\nwhichever was created by Jekyll for you. The file should look like this:\n---\nlayout: default\n---\n\nRun the site\nTo locally run the site, just type\nbundle exec jekyll serve\n\nIt should tell you to go to localhost:4000, open that up in your browser of\nchoice. You should see your site!\n\n Commit the files\nLast but not least, we need to commit all of these files to git.\n\nCongrats on your new site!\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/linux-man-pages",
        "title": "Linux Man Pages",
        "content": "\nI just learned I have a ton of pages in =/usr/local/share/man/man1=.\n\nAnd if you download a man page like [[https://manpages.opensuse.org/Tumbleweed/eza/eza.1.en.gz][this one for eza]], you can install it at\n=/usr/local/share/man/man1/eza.1=.\n\nThen =man eza= just works\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/little-bits-about-a-lot-of-things",
        "title": "Little bits about a lot of things",
        "content": "Little Bit One: Not knowing what to write about\nI woke up this morning not knowing what I want to talk about today. The other\ndays this week, I had a plan of attack for things I wanted to address.\n\nReading some articles about blogging though, it seems that some people advoate\nfor not posting something every day. I hear the appeals to health and\nwell-being; I get that it can be stressful to try and come up with something to\nsay every day.\n\n!--more--\n\nI'm in a different camp though. Being someone who likes to juggle a lot of\nprojects at once, there's always an issue I could be working on. Maybe not even\nan issue. During the \"complete-this-project\" phase, it's always nice to know\nwhat the next step is; thus, having an unfinished project means there's always a\n\"next thing\" to tackle. \n\nSince I'm not a super genius, working on a project means confronting a problem\nand having to do a bit of digging to try and overcome it. \n\nThat's what I'd like my blog posts to be about.\n\n Little Bit Two: Spacemacs Update\nI took a step back from learning Spacemacs a while ago. It was eating up a lot\nof time because I would have a question and google some things and get lost in\nhow great some other feature is. Time was not something I had a lot of because I\nreally wanted to finish  some websites and get the freeCodeCamp Responsive Web\nDesign certificate. \n\nI still don't have the certificate; I am closer than I was when I stopped using\nSpacemacs. I happened to open it up the other day and taking some notes with it\njust felt great.\n\nI found some new features that I can't see myself living without now:\nSPC t r toggles \"relative line numbers\" to appear. Instead of normal line\n  numbers, I see how far away a line is from the line I am editing on. This is\n  great to use with Vim navigation because I just type in the number of lines I\n  want to move, the direction I want to go, and I go!\nSPC t - followed by H or L has changed the way I scroll through a\n  document. The first command forces my cursor to sit on the equator of the\n  screen. H says to move the cursor to the line at the top of my screen. So\n  basically the whole screen scrolls until the top line is my equator line! L\n  is the same thing, but for the bottom line. \n  \n  The issue isn't that other editors can't do these things. It's 2018, I'm sure\n  someone somewhere has written the package that makes X editor do the same\n  thing. It's just that I'll use Spacemacs for like an hour, get used to having\n  the features, go use something else, realize I lack those features, and that's\n  where the problem is: why take the time to install/configure the features,\n  when I can just open Spacemacs and have it immdiately. \n  \n  I like to refer to this xkcd comic when dealing with\n  things like this.\n\nLittle Bit Three: Coming Soon\nI ended up having a lot to say here, so I'm moving it to a new post. This one\nturned out much longer than I thought it would.\n\n Daily Blog Day 5 is in the books!\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/loving-annoying-things",
        "title": "Loving Annoying Things",
        "content": "I've been absorbing quite a bit of content from Gary Vaynerchuk lately. I really\nlike his idea of not making excuses and getting to work and eating dirt and\nloving the process. I mean, it's hard to argue against those things and risk\nbeing associated with negative things; despite that, I personally don't deny\nthey are good ideas. How much weight you give them is up to you.\n\n!--more--\n\nTo relate eating dirt and loving the process to my title for this post: learning\nClojure has been an annoying process, but a very interesting one.\n\nIn the last two weeks, I've got through 4 or 5 chapters of `Clojure for the\nBrave and True` by Daniel Higginbotham, [the full book\nhere.](https://www.braveclojure.com/clojure-for-the-brave-and-true/) The book\nreally started to click for me once I hit the fifth chapter on functional\nprogramming.\n\nI know that's when it clicked because while I was reading, I was also trying to\npractice coding problems on CodeWars. I was very\nlost for the first week and a half- I just couldn't figure out how to get around\nthe immutability of the data structures in Clojure. Also, the whole \"operating\non lists/sequences\" to make other sequences was a simple enough idea to wrap my\nhead around. However, using that to solve a problem was a real head scratcher.\n\nAnyway, the moral of the story is that the Clojure standard library is vast and\nextensive. And while I have the right idea of how to approach some of these more\nbasic problems I am encountering, I should go look for the function that does it\nalready, instead of implementing it myself.\n\nHere's the piece of code in question:\n;; Given num = 10x+y,\n;; return some val = x - 2y\n\n;; My version\n;; - Complained if num was too big\n(defn decomp [num]\n    (- (/ num 10) (* 2 (mod num 10)))\n\n;; The Good Version\n(defn decomp [num]\n    (- (quot num 10) (* 2 (mod num 10))))\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/magit:-multiple-push-remotes",
        "title": "Magit: Multiple Push Remotes",
        "content": "\nI wanted to do the equivalent of this, but in magit\ngit remote rename origin github\n\ngit remote add codeberg https://codeberg.org/jkreeftmeijer/ox-md-title.el.git\ngit remote add origin https://codeberg.org/jkreeftmeijer/ox-md-title.el.git\n\ngit remote set-url --add --push origin https://codeberg.org/jkreeftmeijer/ox-md-title.el.git\ngit remote set-url --add --push origin https://github.com/jeffkreeftmeijer/ox-md-title.el\n\ngit remote show origin\n\nremote origin\n  Fetch URL: https://codeberg.org/jkreeftmeijer/ox-md-title.el.git\n  Push  URL: https://codeberg.org/jkreeftmeijer/ox-md-title.el.git\n  Push  URL: https://github.com/jeffkreeftmeijer/ox-md-title.el\n  HEAD branch: main\n  Remote branch:\n    main new (next fetch will store in remotes/origin)\n  Local ref configured for 'git push':\n    main pushes to main (up to date)\nSource\n\nRenaming was easy:\nM r, origin, andylu\n\nAdding another remote was also simple:\nM a, github, git@github.com:blah.git\n\nAdding origin back in was just:\nM a, origin, ssh://git@gitea.andylu.dev:1702/blah.git\n\nSetting multiple push remotes took bit of work to figure out. Ultimately, you just give it a\ncomma-space separated list of push URLs:\nM C, origin, s, ssh://git@gitea.andylu.dev:1702/blah.git, git@github.com:blah.git\n\nLast thing was setting the push remote default back to origin:\nP C, hit p until origin is highlighted\n",
        "tags": [
            "emacs",
            "magit"
        ]
    },
    {
        "uri": "/cappucchino/minor-improvements",
        "title": "Minor Improvements",
        "content": "\nInspired by some posts I read on Medium, I found new reasons to build the habit\nof keeping a journal. This whole idea deserves it's own post one day, but for\nnow I was just bringing it up because my journal is oriented by months. \n\nFor the month of September, I set out to blog more. More specifically, I devised\na schedule for myself and tried to stick to it. \n\n!--more--\n\nThis morning, seeing that September is half over, I decided to check in on\nmyself and see how I am doing.\n\nTo my surprise, I've written a lot less than I thought I have. I've put out 7\nposts in the last 15 days. While it's not bad, I think the dangerous thing is\nthat I didn't notice it sooner. \n\nThe Challenge\n\nSo I'm going to work towards being a bit more self-aware with regards to my\nwriting this week. Starting with this post, can I hit 7 out of 7 for this\nupcoming week?\n\nOh and I'm going to repost my blog on Medium on a delay. I'll figure out the\nplan tomorrow though.\n\n---\n\nIn other news, I made a few tweaks to the site today. \n\nDesign is not one of my strong points, but after reading a post earlier about\ntypography, I decided to make one small change immediately: I changed the main\nfont of the site.\n\nI don't know why, I don't even know if I picked a good one. But I did it. So\nhere's to one small step in learning about design choices.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/my-babashka-cookbook",
        "title": "My Babashka Cookbook",
        "content": "\nThis post is the one I want to reference when I do something in `babashka` and forget syntax or\nsomething.\n\n* Capture a process's `STDOUT` and process the string after\n\n#+begin_src clojure\n  (require '[babashka.process :as bp])\n\n  (-> (bp/shell {:out :string} \"do-the-thing\")\n      :out\n      (clojure.string/split #\"\\n\"))\n#+end_src\n\n* Import a local library\n\n** Dynamically\n\nYou can add deps as one of the first steps in your scripts.\n\n#+begin_src clojure\n  (require '[babashka.deps :as deps])\n  (deps/add-deps\n   '{:deps {io.github.lispyclouds/bblgum {:git/sha \"1d4de3d49b84f64d1b71930fa1161f8d2622a4d9\"}\n            dev.andylu/clj-lipgloss      {:local/root \"/home/andy/git/clj-lipgloss\"}}})\n\n  (require '[bblgum.core :as b])\n  (require '[clj-lipgloss.core :as lg :use [log-info log-warn log-debug]])\n#+end_src\n\n** Statically\n\nPut this in a `bb.edn`\n\n#+begin_src clojure\n  {:deps {io.github.lispyclouds/bblgum {:git/sha \"1d4de3d49b84f64d1b71930fa1161f8d2622a4d9\"}\n          dev.andylu/clj-lipgloss      {:local/root \"/home/andy/git/clj-lipgloss\"}}}\n#+end_src\n\nAnd then in your code\n\n#+begin_src clojure\n  (require '[bblgum.core :as b])\n  (require '[clj-lipgloss.core :as lg :use [log-info log-warn log-debug]])\n#+end_src\n\n* Building a CLI tool\n\n** Super basic call\nA basic call to `babashka.cli/parse-args`\n\n#+begin_src clojure\n  (cli/parse-args *command-line-args*)\n#+end_src\n\n#+begin_src shell\n  alu-field-selection new-catalog -o new-catalog-selected\n  {:args [new-catalog], :opts {:o new-catalog-selected}}\n#+end_src\n\n** Adding a help command\nFor parsing the help flag, I like to just do a first pass and look the `-h` or `--help`\n\n#+begin_src clojure\n  (defn show-help []\n    (println \"TODO\"))\n\n  (defn passed-help-arg? [args]\n    (let [options (cli/parse-args args {:alias  {:h :help}\n                                        :coerce {:help :boolean}})]\n      (when (-> options :opts :help)\n        (show-help)\n        (System/exit 0))))\n\n  (when (= *file* (System/getProperty \"babashka.file\"))\n    (passed-help-arg? *command-line-args*)\n\n    (apply main *command-line-args*))\n#+end_src\n\nI think it's a nice approach to say my script will never try to handle your other input if there is\na help arg passed in.\n\n** Supporting short and long option flags\n\n#+begin_src clojure\n  (cli/parse-args args\n                  {:alias {:o :output}})\n#+end_src\n\n#+begin_src shell\n  alu-field-selection new-catalog --output new-catalog-selected\n  {:args [new-catalog], :opts {:output new-catalog-selected}}\n#+end_src\n\n** Coerce args to opts\n\nSometimes you want to consider any args passed in to be grouped into some option keys\n\n#+begin_src clojure\n  (cli/parse-args args\n                  {:alias      {:o :output}\n                   :args->opts [:input]})\n#+end_src\n\n#+begin_src shell\n  alu-field-selection new-catalog --output new-catalog-selected\n  {:opts {:input new-catalog, :output new-catalog-selected}}\n#+end_src\n\n** Requiring input\n\nYou can cause the script to exit when certain input isn't given\n\n#+begin_src clojure\n  (defn show-help [& args]\n    (println \"TODO Write show-help\"))\n\n  (defn exit-on-error [_]\n    (show-help)\n    (System/exit 1))\n\n  (cli/parse-args args\n                  {:alias      {:o :output}\n                   :args->opts [:input]\n                   :require    [:input]\n                   :exec-args  {:output \"NEW-catalog\"}\n                   :error-fn   exit-on-error})\n#+end_src\n\n#+begin_src shell\n  alu-field-selection\n  TODO Write show-help\n#+end_src\n\nThis lets us reuse the help function we already wrote and by adding a custom `:error-fn`, we can\navoid dumping a stack trace for the end user.\n\nBabashka can give a little context to `exit-on-error` too.\n\n#+begin_src clojure\n  (defn exit-on-error [{:keys [msg]}]\n    (println msg)\n    (show-help)\n    (System/exit 1))\n#+end_src\n\n#+begin_src shell\n  alu-field-selection\n  Required option: :input\n  TODO Write show-help\n#+end_src\n\n** Interactive fuzzy file picker\n\nBy using `gum input` with a placeholder, we can show the user some default directory. If that's the\none they want, then hitting enter will return an empty string to our script. Couple that with the\n`(or ... default-dir)` and you can actually save the `default-dir` as the choice.\n\nTo get the fuzzy find, we use `gum filter`. It expects newline separated input which is what\n`babashka.process/shell` spits out. Finally, for the `filter`, I set a `:height 10` so that `gum`\ndoesn't try to fill the whole screen when it gets a ton of input\n\n#+begin_src clojure\n  (let [default-dir (System/getenv \"PWD\")\n        chosen-dir  (or (-> (b/gum :input\n                                   :placeholder default-dir)\n                            :result\n                            first)\n                        default-dir)\n        files       (-> {:out :string}\n                        (bp/shell \"ls\" chosen-dir)\n                        :out)]\n    (->> (b/gum :filter :height 10 :in files)\n         :result\n         first))\n#+end_src\n\n#+begin_src shell\n\n#+end_src\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#+begin_src clojure\n\n#+end_src\n\n#+begin_src shell\n\n#+end_src\n",
        "tags": [
            "babashka",
            "written-in-org-mode"
        ]
    },
    {
        "uri": "/cappucchino/my-studio-commandments",
        "title": "My Studio Commandments",
        "content": "Inspired by [this\npost](https://superyesmore.com/studio-commandments-a5300cdf50b8a30ec909955b119f9174)\nI read by Sarah Drasner, I thought it would be a really good idea to list my\n\"studio commandments\". Just like Sarah, I can see how these would change over\ntime. So while this is not what I would've asked of myself in college, I think\nthese rules fit my work style these days.\n\n!--more--\n\nI also like that this serves as a great snapshot of how my work style changes\nwith time. I am curious to see which rules persist or which rules get heavily\nmodified. \n\nWithout further ado,\n\nMy Rules\nStart each day with a cup of coffee\n    Okay, I lied, this one speaks to younger me too. I'm sure this one is also\n      not going anywhere any time soon\n\nKeep water in arms reach, refill when empty\n    This is a dual purpose rule. One is to counter any diuretic effects of\n      caffeine\n    Two is to make sure I get up every now and tehn to walk. I typically go\n      through 24 oz. (~710 mL for you metric folks) per 3 hours\n  \nRace yourself: Set a crazy sounding time to finish a chunck of work/task and\n   try to achieve it\n    I think this helps in trying to push me to work smarter. Best case\n   scenario I do what I set out to do; worst case scenario I spend a little more\n   time on the task and get it done anyway\n   \nGetting distracted is okay, just don't get too distracted\n    I know it's inevitable, but once I notice that I am distracted (obviously\n      easier said than done), I can start making decisions to get back to work\n      \nMake notes of the process/steps of whatever task you do. For yourself and for\n   others in the same boat as you\n    I know how it feels to reach some complicated documentation and feel\n      discouraged that it is a pain to read and try an comprehend. So this one\n      stems a bit from the boyscout rule: I want to leave the internet a little\n      better than when I found it\n      \nI will take some time to read over these before I work, just to make sure it\nreally sticks. I am curious to see what is wishful thinking or what is a rule I\nchoose to live by.\n\nThis all seems like I need to follow up with a post about work life balance\nmeans to me. Maybe tomorrow's post can be about that!\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/new-cups",
        "title": "New Cups",
        "content": "!--more--\n\n{{ figure src=\"/v1/img/woodKiln.jpg\" }}\n\nOpening a kiln never gets old. Especially a wood kiln when you never know what\nwill happen to your pieces. Exhibit A is the figure on the far right of the\npicture. It was standing just fine going into the kiln, but for what is likely\na combination of a lot of different reasons, a leg fell off. It's nothing a\nlittle super glue can't fix, so there are no negative feelings there.\n\nOne of the more interesting things I'll note, since I haven't really had time\nto sit down and look at these pieces in detail, the two cups in the front row\nof the left side are basically identical cups. However, placement in the kiln\nthough exposed them to different conditions, resulting in different finishes.\nIt's a blessing or a curse depending on what you are going for, but it's\nsomething you always have to consider when making pieces for a wood kiln.\n\nNow I just need to find a home for each piece and move on to making the next\nbatch!\n",
        "tags": [
            "ceramics"
        ]
    },
    {
        "uri": "/cappucchino/new-strategy",
        "title": "New Strategy",
        "content": "After analyzing my process for writing blog posts, I've realized some things.\n\n!--more--\n\nFirst, I can't write and publish on the same day. I like to write about problems\nI've faced or solutions I've come up with. Yet solving those problems take up a \nlot of the day. If I let it, it can consume the entire day, easily. That's bad \nfor this idea of blogging everyday because it adds another thing I have to do \nto the day; which increases the odds that it's not happening. \n\nSecond, I'm lacking in the more long form blog post that I want to put out on\nlike Medium or dev.to. Sure I could just port my daily stuff, but it wouldn't\nfeel right because these are so casual. \n\nTo address these issues, I've been trying to come up with a system - a blog \npost lifecycle, if you will. It's what more professional people do, and while I \ndon't know their exact system, I can tweak whatever I come up with until I am \nsatisfied with it. \n\nI've been planning out how to steal more time for myself throughout the day to\nactually write more. This means I should have more time to dedicate to this\n\"lifecycle\". \n\nIdeally, I have a 3 day cycle for daily posts: \nDay 1 is for the rough, paper draft\nDay 2 is for an electronic, edited version\nDay 3 is publishing\n\nI've been planning out a way to automate most of this too, because it would\nlower the \"activation energy\" needed to keep all of this running.\n\nOn top of that, throughout the week, I would also be working on a longer post. \nIdeally, these posts get a 6 day cycle:\n5 days to write the post\nThe last day is publishing\n\nThis means that I can have daily posts Monday through Friday, a long form post\ncome out on Saturday, and Sunday be free to plan and do other things. \n\n---\n\nI want to mention that all of this was really triggered by [this\npost](https://dev.to/vickylai/how-to-set-up-a-short-feedback-loop-as-a-solo-coder-4gbc)\nthat I read on dev.to. \n\nThe idea of shorter feedback loops is not new to me. It's\nthe same as taking a big goal and breaking it down into a bunch of smaller\ngoals. The small goals give you the feedback that you are doing something right\nmuch sooner than waiting to see if you accomplish the big goal. \n\nJust to beat the dead horse one more time: small feedback loops are essentially\nwhat all of the different belt colors in martial arts is for. Instead of asking\nyourself, \"Am I a black belt yet?\", you can check how far along this\npre-established path you are and trust that you will get there eventually.\n\nAnyway, I was so focused on figuring out what to write about next, I didn't stop\nto realize I need to change the process of how I'm writing in the first place. \n\nSo with a bit of research, a few days of planning, and remembering that I need\nto focus on doing this \"good enough for now\" instead of \"perfect\", a plan was\nborn. \n\nHere's to more consistent writing!\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/org-mode-is-better-glue-code-than-bash",
        "title": "Org Mode Is Better Glue Code Than Bash",
        "content": "\nTLDR\nThis post is just to document a scenario I put myself in. But I wanted to write it down in case I\nneed to use it again in the future.\n\n Problem\nYou have a CSV file from your bank with some expenses listed.\n\nYou want to generate an PDF invoice file to send to someone and collect some money.\n\nSolution\n\nI think the solution is to\nimport the CSV into an org table\nuse your favorite programming language to format the data\nuse maaslalani/invoice to quickly make a PDF\n\n Deep Dive\n\nWhen I'm dealing with CSV files, I often reach for org-mode in emacs just to make the file\neasier to read.\n\nFor example, this is a mess\n\nTransaction Date,Post Date,Description,Category,Type,Amount,Memo\n12/01/2023,12/02/2023,Big Expense Number 1,Shopping,Sale,-2414.73,\n12/02/2023,12/03/2023,Some Other Expense,Personal,Sale,-95.00,\n12/03/2023,12/04/2023,This Expense You Don't Recognize,Groceries,Sale,-20.82,\n\nBut if you copy this file -- honestly I just open the original --, open in org-mode, C-x h to\nselect the entire buffer, M-x org-mode, and M-x org-table-create-or-convert-from-region, then\nyou get this:\n\n| Transaction Date | Post Date  | Description                      | Category  | Type |   Amount | Memo |\n| 12/01/2023       | 12/02/2023 | Big Expense Number 1             | Shopping  | Sale | -2414.73 |      |\n| 12/02/2023       | 12/03/2023 | Some Other Expense               | Personal  | Sale |   -95.00 |      |\n| 12/03/2023       | 12/04/2023 | This Expense You Don't Recognize | Groceries | Sale |   -20.82 |      |\n\nI always separate the header row from the body, so just add |-| as a new line 2 and hit tab. Which\nturns this\n\n| Transaction Date | Post Date  | Description                      | Category  | Type |   Amount | Memo |\n|-|\n| 12/01/2023       | 12/02/2023 | Big Expense Number 1             | Shopping  | Sale | -2414.73 |      |\n| 12/02/2023       | 12/03/2023 | Some Other Expense               | Personal  | Sale |   -95.00 |      |\n| 12/03/2023       | 12/04/2023 | This Expense You Don't Recognize | Groceries | Sale |   -20.82 |      |\n\ninto this\n\n| Transaction Date | Post Date  | Description                      | Category  | Type |   Amount | Memo |\n|------------------+------------+----------------------------------+-----------+------+----------+------|\n| 12/01/2023       | 12/02/2023 | Big Expense Number 1             | Shopping  | Sale | -2414.73 |      |\n| 12/02/2023       | 12/03/2023 | Some Other Expense               | Personal  | Sale |   -95.00 |      |\n| 12/03/2023       | 12/04/2023 | This Expense You Don't Recognize | Groceries | Sale |   -20.82 |      |\n\nIf you look through the README for invoice, you'll see that you can specify multiple `--item\n.. --quantity ... lines in one invoice generate call`. I took a guess that this applies to\n--rate as well. But this is perfect for the problem I have. I just need to turn my table into a\nbig block of shell code.\n\norg-mode lets you name the tables you create and pass them to various code blocks as input. I\nwon't go through the following clojure at all, but the intent is \"given an org table as input,\nselect the relevant columns, and format them into code we can hand to invoice\".\n\n(let [[header & data] input\n      rows            (- data\n                           (reduce (fn [state row]\n                                     (conj state\n                                           (zipmap header\n                                                   row)))\n                                   []))]\n  (doseq [{:strs [Description Amount]} (butlast rows)]\n    (println (format \"--item \\\"%s\\\" --quantity 1 --rate %.2f \\\\\"\n                     Description Amount)))\n  (let [{:strs [Description Amount]} (last rows)]\n    (print (format \"--item \\\"%s\\\" --quantity 1 --rate %.2f \\\\\"\n                   Description Amount))))\n\nHere's the org block I needed\n+NAME: table-to-lines\n+begin_src clojure :colnames no :var input=table-of-data :exports results :results output\n  <all of the clojure from above\n+end_src\n+NAME: table-to-lines is the variable name for this code block\n  This will help me export the code to a particular spot later\n:colnames no tells org-babel to not strip the header row\n:var input=table-of-data binds input to some thing I named table-of-data\n  I just slapped a #+NAME: table-of-data onto the org table from before\n  Because this is a clojure source, I think it turned the table into seq of seqs\n    ((header1 header2 header3) (r1c1 r1c2 r1c3) (r2c1 r2c2 r2c3) ...)\n:exports results tells org-babel later to export this block as only the results, not the code\n  itself\n:results output says to collect everything printed as the result, not just the final return\n  value\n\nThe one thing I do want to say about the clojure is that I needed to separate the final row from the\nothers because the final println and whatever org-babel is doing resulted in my output having a\nblank line at the end. This caused issues in my final script, and I couldn't find the answer on how\nto clean that up through org-mode. So the next best thing was to just modify my code a bit.\nThankfully clojure has butlast and last.\n\nYou can run this and should see the folowing output:\n\n+RESULTS: table-to-lines\n: --item \"Big Expense Number 1\" --quantity 1 --rate -2414.73 \\\n: --item \"Some Other Expense\" --quantity 1 --rate -95.00 \\\n: --item \"This Expense You Don't Recognize\" --quantity 1 --rate -20.82 \\\n\nThis is the meat of the script I want to generate. The next part is to write the two source blocks\nthat are needed to round out the command. You can imagine it looks something like this\n\n+NAME: make-invoice-start\n+begin_src shell\n  invoice generate \\\n    --from \"Andy, Inc.\" \\\n    --to \"Owes Me Money\" \\\n+end_src\n\n+NAME: make-invoice-end\n+begin_src shell\n    --tax 0 --discount 0.99 \\\n    --note \"TEST Don't actually pay this\"\n+end_src\n\nSo now that I have 3 named source code blocks, I can create a script that is generated from this org\nfile I've been working in\n\n+begin_src shell :dir /tmp/ :tangle make-invoice :noweb yes\n  <make-invoice-start\n    <table-to-lines()\n    <make-invoice-end\n+end_src\n\nThis says, on tangle, create a file called make-invoice and concatenates the contents of the\nfollowing named blocks as the file. The parens in table-to-lines() say to evaluate that block\nbefore tangling. And remember that I set an option on that block to export the results instead of\nthe code. So make-invoice has the command I want to call.\n\nTo actually generate that file, run M-x org-babel-tangle.\n\nYou can run it from inside org-mode too. Just add a block like this and C-c C-c\n+begin_src shell :dir /tmp/\n  bash ./make-invoice\n+end_src\n\nI'm going to leave it as a challenge for the reader to tweak this solution so that I only need to\ncombine two source blocks instead of my three.\n\n[1]: https://github.com/maaslalani/invoice/tree/0fb2e9d84385c6393ca6925bc6d25a89555b0b2d\n",
        "tags": [
            "emacs",
            "clojure"
        ]
    },
    {
        "uri": "/cappucchino/personal-finance",
        "title": "Personal Finance",
        "content": "\nI was determined to put something out tonight, so I just wanted to make a quick\nnote of today.\n\nI delved into the world of personal finance and played around with a few\nversions of a budget. To assist myself in making the budget, I wrote a little\nPython script to juggle all of the variables I could think of. These all\ninteracted in a way that I think resembles how the world actually works- as far\nas taxes and savings and whatnot goes. \n\nThe bulk of the advice I'm following comes from Ramit Sethi, whose book, \"I Will\nTeach You To Be Rich\", I was able to check out from the library. \n\nMy main draw to Sethi is due to this one line I heard him say. It was along the\nlines of, \"I don't think telling people to cut out their latte habit is sound\nfinancial advice\". Running the numbers, I agree with Sethi that it doesn't offer\na huge return on your effort and just ruins your morning if you love having a\nlatte to start the day. \n\nSo finance was today's focus. Maybe tomorrow will be another Clojure day so I\ncan slow down and really think through a financial plan.\n\nI'll leave you with the main question I grappled with today: \"How much money do\nyou need, per month, to comfortably live after savings and expenses are\naccounted for?\".\n",
        "tags": [
            "finance"
        ]
    },
    {
        "uri": "/cappucchino/projects-i-m-watching",
        "title": "Projects I'm Watching",
        "content": "\n* Monica\n\nI like the thought of building this little database of info. But it does sound like a lot of work to\nactually enter this information. I'm waiting for the next version of the app to release because\nright now the self-hosted app hosts one account.\n\n- https://github.com/monicahq/monica\n\n* Stalwart\n\nI tried setting this up already, but hit some snags getting outbound SMTP working on Oracle Cloud.\nIt's weird because I was able to manually use =telnet= to get to an external relay service, but\n=stalwart= could not do the same thing. I will pick this up again another day.\n\n- https://github.com/stalwartlabs/mail-server\n\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/python-can-do-whatever-javascript-does",
        "title": "Python can do whatever JavaScript does",
        "content": "\nI have no idea if the title of this post is true. I don't actually want to make\nthat claim.\n\nI did discover one way of defining higher order functions in Python though,\nexactly like how I did with JavaScript yesterday.\n\n!--more--\n\nI'll use the same example functions as yesterday, so if you get lost, go read\nthat post first. I'll wait right here.\n\nHere's the example in Python, I figure it's easiest to look over the whole\npiece of code first:\n!/usr/bin/env python3\n\ndef plusNum(num):\n  return lambda x: x + num\n  \nplusOne = plusNum(1)\nplusTwo = plusNum(2)\n\nprint(plusOne(2) == 3)\nprint(plusTwo(2) == 4)\n\nI'm not very familiar with Lambda functions, this was just the first thing I\ntried. If this had failed, I read in the Python Documentation that there is \na Standard library module called functools. Read about it \nhere. \n\nI will look into all of this more and figure out how Python does it. I wonder\nwhat the most Pythonic way of doing it is too.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/python-for-bash",
        "title": "Python for bash",
        "content": "Do you like bash scripts? Personally, I don't.\n\nSo when I need to write bash scripts, I figure out the commands I need, then \nglue them together with Python.\n\nIt's been a while since I've needed to do this and while I neglected it before,\nthe subprocess module is the best way to run these commands. \n\n!--more--\n\nA Quick Intro to Python's subprocess.py\n\n Development Environment\nIf you are following along with me here, you'll want to be using at least `python\n3.5`. Any version before that and you'll have to use a different API in this\nmodule to do the things I'll show you.\n\nThe Command\nThe workhorse of this module is the subprocess.Popen class. There are a ton of\narguments you can pass this class, but it can be overwhelming- and not to\nmention overkill- if you're new to this.\n\nThankfully, there's a function in the subprocess module that we can interface\nwith instead: subprocess.run().\n\nHere's the function signature with some typical arguments passed in. (I pulled\nthis from the Docs)\nsubprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None,\nshell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None,\ntext=None, env=None)*)\n\nThat looks pretty complicated, but we can actually ignore most of it and still\ndo pretty neat things. Let's look at some examples.\n\n A Basic Example\nimport subprocess as sp\n\nresult = sp.run(\"pwd\")\nprint(result)\n\nThe output:\n/this/is/the/path/to/where/my/terminal/was/\nCompletedProcess(args=\"pwd\", returncode=0)\n\nThe output of this is the path to the directory you ran this script from;\nexactly what you would expect. Then there's some CompletedProcess object. This\nis just an object that stores some information about the command that was run.\nFor this guide, I'm ignoring it, but I'll have links at the end where you can\nread all about it.\n\nBut that's it! That's all you need to run some basic bash commands. The only\ncaveat is you'll be lacking some features of a shell.\n\nTo overcome this, let's look at the next example.\n\nA Better Example\nimport subprocess as sp\n\nresult = sp.run(\"ls -lah  someFile.txt\", shell=True)\noutput = sp.run('ls -lah | grep \".txt\"', shell=True)\n\nYou may have noticed earlier in the function signature that shell=False, but\nhere I set it to True. By doing so, the command I want actually gets run in a\nshell. That means I have access to redirection and pipes like I've shown.\n\nA note on running things like this: the command you want to execute must be\ntyped exactly the way you would if you were doing it on a shell. If you read\nthrough the Documentation, you'll notice there is a way to run commands as by\npassing in a list of strings, where each string is either the command or a flag\nor input to the main command. \n\nI found this confusing because if you follow my \"Better Example\" way, you are\nnever left wondering if you passed in the arguments correctly. On top of that,\nyou are free to use Python to build up a command based on various conditions.\n\nHere's an example of me doing just that.\n\n A \"Real World\" Example\n!/usr/bin/env python3\n\n#########################################################################\nImports                                   \n###################################################################\nimport subprocess as sp\nfrom datetime import date\n\n###################################################################\nFunctions                                  \n###################################################################\n\ndef getTodaysDate():\n  currDate = date.today()\n  return f\"{currDate.year}-{currDate.month}-{currDate.day}\"\n\ndef moveToPosts():\n  lsprocess = sp.run(\"ls ./_drafts\", shell=True, stdout=sp.PIPE)\n  fileList = lsprocess.stdout.decode('utf-8').strip().split(\"\\n\")\n  hasNewPost = len(fileList)\n\n  if (hasNewPost == 1):\n      print(\"New post detected\")\n      \n      srcName = \"./_drafts/\" + fileList[0]\n      destName = \" ./_posts/\" + getTodaysDate() + \"-\" + fileList[0]\n      \n      command = \"mv \"+ srcName + destName\n      sp.run(command, shell=True)\n      \n      return [destName, files[0]]\n      \n  elif hasNewPost == 0:\n      print(\"Write more!\")\n  else:\n      print(\"Too many things, not sure what to do\")\n\ndef runGit(fullPath, fileName):\n  \n  commitMsg = \"'Add new blog post'\"\n  \n  c1 = \"git add \" + fullPath\n  c2 = \"git commit -m \" + commitMsg\n\n  cmds = [c1,c2]\n  \n  for cmd in cmds:\n    cp = sp.run(cmd, shell=True)\n    \nif name == \"main\":\n  pathToPost, fileName = moveToPosts()\n  runGit(pathToPost, fileName)\n  print(\"Done\") \nSince this blog is running thanks to Jekyll, I took advantage of the _drafts\nfolder available to me.\n\nFor those of you unfamiliar with Jekyll, _drafts is a folder where you can\nstore blog posts that aren't ready to be published yet. Published posts go in\n_posts.\n\nThe filenames in this folder look like: the-title-of-my-post.md. The filenames\nfor published post that sit in the _posts folder have the same name, but with\nthe year-month-day- attached to the front of the draft name.\n\nWith this script, I just have to write a post and drop it into _drafts. Then I\nopen a terminal and run this script. First it looks in _drafts and makes an\narray of the filenames it found. Anything other than just finding one file will\nstop the script- I'll improve this one day. With that file name and the help of\nsubprocess.run(), the script moves the draft into _posts, gives it the\nappropriate name, then commits it to git for me. \n\nWrap Up\nI introduced the subprocess.run() function, gave 3 examples of running bash\ncommands with it, and ended with the script that inspired this post in the first\nplace. \n\nI personally don't have too many uses for bash scripts. When I need one\nthough, I'll definitely be writing it in Python and if it suits your needs, you\nshould too.\n\n Further Reading\nPython Documentation\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/python-packaging",
        "title": "Python Packaging",
        "content": "\nI didn't know what to use between poetry and hatch.\n\nI just followed the guide from the Packaging Guide.\n\nIt ended with me having the following directory structure\n\n.\n├── pyproject.toml\n├── README.org\n├── src\n│   └── andyaoc2023\n│       ├── day1.py\n│       └── init.py\n└── tests\n\nWhich isn't too crazy I guess.\n",
        "tags": [
            "python"
        ]
    },
    {
        "uri": "/cappucchino/python-web-scraping",
        "title": "Python Web Scraping",
        "content": "Today was my first time in a long time trying to extract a bunch of information\nfrom a website. I was trying to get a file from a set of webpages, so my first\nthought was,\n\n!--more--\n\n\"Why don't I just figure out the pattern to the URL of the files?\". I think it\nwas a relatively small set of pages to scour, there were only 50 web pages to\nlook at. So I just started with a sample of them to try and tease out a URL\npattern.\n\nThinking back to my experience with Revature, I wondered if there was a way to\nmake Python send HTTP requests for me because that would make things easier on\nmy part. This thought came after my attempt to find a pattern to the download\nlinks though.\n\nSo looking at the URLs, there was a clear template to identifying the files.\nExcept it is a template that makes my job harder. For each file I wanted to\ngrab, there were 3 strings attached to it that uniquely identifies it. The\ndownload URLs were simply a mix of these unique strings with some common\nstrings. This is when I had the thought about making Python make HTTP requests\nfor me because now I had to build a list of all of the unique strings to build a\nURL to run wget with.\n\nRunning short on time (I was only trying to do some light pseudocoding today), I\nthought let's just brute force this and clean it up later. So I did what I hope\nto automate in the coming days: I went to the homepage to use the search bar; I\ntyped in the unique identifier for the page I want to get to; I searched and let\nthe page take me to the page containing the download link I want; I copied the\ndownload link and extracted the three unique identifiers; and that was it! I\nhave a tiny little script to build the URLs for me, request the links I want,\nand write them to a target destination on my computer.\n\nIt's not the most automated version, but at least I have started and can improve\nfrom here.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/reviving-a-2013-macbook-pro",
        "title": "Reviving a 2013 Macbook Pro",
        "content": "\nI have a Late 2013 Macbook Pro Retina, but it's been gathering dust in the closet for years because\nthe charging cable is losing more and more of its rubber sheath. And every time I plug it in, I get\nmore and more concerned that I'm going to shock myself.\n\nSo I've avoided using this laptop until very recently. I discovered that people make adapters to\nMagSafe2 - the proprietary cable type that Apple puts (used to put?) in their laptops.\n\nSo I bought myself a USB-C to MagSafe2 adapter since most other devices in my life right now are\nUSB-C. Here's the exact link.\n\nI'm sure if you get the shape of the MagSafe part correct, then it doesn't really matter which brand\nyou buy. But I didn't pay too much attention to the slide about needing a hefty power brick to\nactually charge your laptop.\n\nSo today I noticed my computer was repeatedly triggering the \"now charging\" notification. But then I\nrealized that it could be power brick I have it plugged into. So I squint at the low contrast text\nat the bottom of the brick - this is a 61 watt Macbook USB-C brick. And sure enough: the max output\nof this thing is 20.3V at 3.0A. That's the bare minimum wattage supported by the adapter.\n\nMy next best brick is a 65W one. And there's no flickering now.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/self-hosting-email",
        "title": "Self Hosting Email",
        "content": "\nI've made a couple attempts at this so far.\n\nThe software I've been looking at is:\nhttps://stalw.art/\nhttps://www.cyrusimap.org/\n\nI didn't really give Cyrus a good go because I got Stalwart in a spot where I could receive messages\nthrough IMAP.\n\nI didn't get far at all with sending messages. Oracle is my currently cloud provider and port 25 is\nblocked on my account.\n\nThe feature that drew me to both of these projects is JMAP support. I heard about it while talking\nto a few people at a recent Philly JS meetup.\n\nI think right now, the novelty of a new protocol is what makes me want to set up an email server.\nThe other reason I want to host it myself is to be able to host email for friends and family -\nthough no one has approached me about wanting a service like this.\n\nThe only scary part for me right now is that I don't know what it would take to provide a stable\nservice. But maybe that's not something I really need to think about. If my email goes down, I\nprobably have other things I need to be worried about.\n\nAnyway, I'll see how much more time I want to throw at this. I think the most reasonable next step\nis pay for Fastmail and watch Stalwart develop over the next year and maybe self host in the future.\n",
        "tags": [
            "homelab"
        ]
    },
    {
        "uri": "/cappucchino/setting-up-mbsync",
        "title": "Setting Up Mbsync",
        "content": "\nInstall\n#+begin_src shell\n  sudo apt install isync\n#+end_src\n\nSet up the config file\n#+begin_src shell\n  touch ~/.mbsyncrc\n#+end_src\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/sicp-js-chapter-2-exercise-2.2-and-2.3",
        "title": "SICP JS Chapter 2 Exercise 2.2 and 2.3",
        "content": "\nHere's my solution to exercise 2.2 and 2.3.\n\nI wrote them in this online editor, source academy, because\nthey provide the functions that the book considers primatives.\n\nExercise 2.2\n/**\n @param {Point} start\n @param {Point} end\n */\nfunction make_segment (start, end) {\n    return pair(start, end);\n}\n\n/**\n @returns {Point}\n */\nfunction start_segment (s) {\n    return head(s);\n}\n\n/**\n @returns {Point}\n */\nfunction end_segment (s) {\n    return tail(s);\n}\n\n/**\n @param {int} x\n @param {int} y\n */\nfunction make_point (x, y) {\n    return pair(x, y);\n}\n\n/**\n @param {Point} s\n @returns {int}\n */\nfunction x_point (s) {\n    return head(s);\n}\n\n/**\n @param {Point} s\n @returns {int}\n */\nfunction y_point (s) {\n    return tail(s);\n}\n\n/**\n @param {Point} s\n @returns {int}\n */\nfunction midpoint_segment (s) {\n    const start = start_segment(s);\n    const end = end_segment(s);\n    const x1 = x_point(start);\n    const y1 = y_point(start);\n    \n    const x2 = x_point(end);\n    const y2 = y_point(end);\n    \n    return make_point( (x2-x1)/2 , \n                       (y2-y1)/2 );\n}\n\nfunction print_point(p) {\n    return display(\"(\" + stringify(x_point(p)) + \", \"\n                       stringify(y_point(p)) + \")\");\n}\n\nconst origin = make_point(0, 0);\nconst unitx = makepoint(1, 0);\nconst unity = makepoint(0, 1);\n\nconst twox = makepoint(2, 0);\nconst twoy = makepoint(0, 2);\n\nprintpoint( midpointsegment( makesegment( origin, twox ) ) );\n// \"(1, 0)\"\nprintpoint( midpointsegment( makesegment( origin, twoy ) ) );\n// \"(0, 1)\"\n\nAdding to this code, here's what I wrote for Exercise 2.3\n\n/**\n @param {Point} a\n @param {Point} b \n @param {Point} c\n @param {Point} d\n */\nfunction make_rectangle (a, b, c, d) {\n    return pair(pair(make_segment(a, b),\n                     make_segment(b, c)),\n                pair(make_segment(c, d),\n                     make_segment(d, a))\n    );\n}\n\n/**\n @param {Rectangle} r\n @returns {Segment}\n */\nfunction left_rectangle (r) {\n    return head(head(r));\n}\n\n/**\n @param {Rectangle} r\n @returns {Segment}\n */\nfunction top_rectangle (r) {\n    return head(tail(r));\n}\n\n/**\n @param {Rectangle} r\n @returns {Segment}\n */\nfunction right_rectangle (r) {\n    return tail(head(r));\n}\n\n/**\n @param {Rectangle} r\n @returns {Segment}\n */\nfunction bottom_rectangle (r) {\n    return tail(tail(r));\n}\n\n/**\n @param {Segment} s\n @returns {int}\n */\nfunction length_segment (s) {\n    const start = start_segment(s);\n    const end = end_segment(s);\n    \n    const x1 = x_point(start);\n    const y1 = y_point(start);\n\n    const x2 = x_point(end);\n    const y2 = y_point(end);\n    \n    const deltax = mathpow(x2-x1, 2);\n    const deltay = mathpow(y2-y1, 2);\n    \n    return mathsqrt(deltax + delta_y);\n}\n\n/**\n @param {Rectangle} r\n @returns {int}\n */\nfunction perimeter_rectangle (r) {\n    const leftlength = lengthsegment(left_rectangle(r));\n    const toplength = lengthsegment(top_rectangle(r));\n    const rightlength = lengthsegment(right_rectangle(r));\n    const bottomlength = lengthsegment(bottom_rectangle(r));\n    \n    return left_length\n         top_length\n         right_length\n         bottom_length;\n}\n\n/**\n @param {Rectangle} r\n @returns {int}\n */\nfunction area_rectangle (r) {\n    return lengthsegment( leftrectangle(r)   )\n         lengthsegment( bottomrectangle(r) );\n}\n\nconst tworect = makerectangle(make_point(0,0), \n                                make_point(0,2),\n                                make_point(2,2),\n                                make_point(2,0));\ndisplay( two_rect );\ndisplay( perimeterrectangle(tworect), \"perimeter:\");\ndisplay( arearectangle(tworect), \"area:\" );\n\nTo finish out the second half of exercise 2.3, I wrote another implementation for the rectangle functions\n\n/**\n @param {Point} a\n @param {Point} b\n @param {Point} c\n */\nfunction make_angle (a, b, c) {\n    return pair(a,\n                pair(b,\n                     pair(c,\n                          null)));\n}\n\n/**\n @param {Angle} abc\n @returns {Point}\n */\nfunction a_angle(abc) {\n    return head(abc);\n}\n\n/**\n @param {Angle} abc\n @returns {Point}\n */\nfunction b_angle(abc) {\n    return head(tail(abc));\n}\n\n/**\n @param {Angle} abc\n @returns {Point}\n */\nfunction c_angle(abc) {\n    return head(tail(tail(abc)));\n}\n\n/**\n @param {Angle} abc\n @returns {Segment}\n */\nfunction left_angle(abc) {\n    return makesegment(aangle(abc),\n                        b_angle(abc));\n}\n\n/**\n @param {Angle} abc\n @returns {Segment}\n */\nfunction right_angle(abc) {\n    return makesegment(bangle(abc),\n                        c_angle(abc));\n}\n\n/**\n @param {Point} p\n @param {Point} q \n */\nfunction make_rectangle (p, q) {\n    const x1 = x_point(p);\n    const y1 = y_point(p);\n    const x2 = x_point(q);\n    const y2 = y_point(q);\n    \n    const corner2 = makepoint(x1, y2);\n    const corner4 = makepoint(x2, y1);\n    \n    return pair(makeangle(p, corner2, q),\n                makeangle(q, corner4, p));\n}\n\nconst tworectagain = makerectangle2(make_point(0,0),\n                                        make_point(2,2));\ndisplay( tworectagain );\n// [[[0, 0], [[0, 2], [[2, 2], null]]], [[2, 2], [[2, 0], [[0, 0], null]]]]\ndisplay( perimeterrectangle(tworect_again), \"perimeter 2:\");\n// perimeter 2: 8\ndisplay( arearectangle(tworect_again), \"area 2:\" );\n// area 2: 4\n\nGood luck if you try to run this. The playground was picky that I had already defined some functions\nand couldn't shadow the name.\n\nThoughts\n\nIt's intersting building in these layers of functions so that higher layers are independent of the\nimplementation of the lower layers.\n\nMy first approach (a pair of pairs of segments) is pretty naive and coupled too tightly to the idea\nof a rectangle.\n\nI was pretty proud of the second approach (a pair of angles) because it felt easy enough to extend\nthe implementation to other polygons if needed. Looking back on the code now after stepping away\nfrom it, I would tweak the definition of a rectangle to be more cons-cell like instead of just being\na single pair. This would let you write more general functions that given a list of angles, returns\nthe name of the polygon or sums the interior angles or decides if the shape closes or whatever.\n\nI left the null in the angle constructor to be future slots for other data. Maybe that was a dumb\ndecision. But it felt right and in the same spirit as the rest of the code to have this base level\n\"make an angle object\" and then let functions that take an angle object tell you things about it.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/some-react-notes",
        "title": "Some React Notes",
        "content": "I just wanted to summerize and reflect on some notes from Day 5, 10, and 11 of\nmy #100DaysOfCode challenge on Twitter. \n\nSo far, React has been fairly easy to pick up. It started with introducing this\nidea of a JSX Element, which is a mix of HTML and JavaScript that wouldn't\nwork as pure HTML or pure JavaScript. There are these ideas of nesting the JSX\nelements and state. \n\n!--more--\n\nI think the easiest way of wrapping your head around React is to treat it like\nOOP; I mean, there's only two ways (that I know of right now) to declare JSX\nelements. The analogy is only strengthened by the fact that JSX comes in the \nform of a function or a class. Add to that variables or constants that capture\nthe state of the data and you really do just have a class in the OOP sense of \nthings.\n\nRight now I have two questions that have yet to be answered:\n  freeCodeCamp seems to always define an \"inner\" element before the \"outer\"\n     element. I wonder if that is a JavaScript thing and just how it needs to \n     be done or if it's a React thing.\n     \n  I'm curious how React fits into a project and where it is written in terms\n     of files. I'm picturing your average website with HTML, CSS, and JavaScript\n     separated into different files. Then you add hooks in the HTML to call\n     JavaScript functions that create the JSX elements or change based on the\n     state. I just don't know where the functions calls to update the DOM go.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/tailscale-and-vlc",
        "title": "Tailscale and VLC",
        "content": "\nI have videos sitting on one computer and I want to stream it from another computer.\n\nThankfully they are both connected by Tailscale.\n\nSo on the server, I can run\n\ntailscale serve --bg /path/to/my/directory/of/videos\n\nAnd then from a client using something like VLC, I can connect to\n\nhttps://red.panda-gopher.ts.net/Video1.mp4\n\nBut wait, there's more!\n\nIt turns out that https://red.panda-gopher.ts.net/ is an index of all of the\nfiles you're serving. So you could just copy the links right from that page to\npaste into VLC.\n\nBut wait, there's still more!\n\nBecause this is tailscale driven, if you share the server node to another\ntailnet, then more people can do exactly this and also stream your videos.\n\nSo really the only limits are:\nCan I install tailscale on the device?\nCan I install VLC on the device?\n\n",
        "tags": [
            "tailscale"
        ]
    },
    {
        "uri": "/cappucchino/tailscale-subnet-routers",
        "title": "Tailscale Subnet Routers",
        "content": "\nLet's say you have an existing tailnet you want to connect a new device to. However, you can't install tailscale on the device for some reason.\n\nBut you happen to have a fancy travel router, like the beryl-ax, running OpenWrt and tailscale, you can turn it into a subnet router.\n\nA subnet router just connects two subnets on two different networks. As far as I can tell, this is intended to be a one way connection. The devices in my tailnet with a real tailnet address could ping a device in the non-tailnet subnet.\n\nMy problem though is that I wanted the connection in the other direction: I have a device I can't install tailscale on and wanted to be able to ssh to a device in my tailnet.\n\nThe perk of having the travel router is that it could be added to my tailnet as a bonafide node. And on top of that, I can ssh to it.\n\nBut more important that than: I can ssh through it.\n\nThe pre-req to all of this is using ssh-copy-id to store my ssh key on the router in ~/.ssh/authorized_keys. I'm not sure if this is strictly necessary for the proxy command I'm trying to set up, but I'm pretty sure it only helps.\n\nOpenSSH's ssh client has a ProxyJump option. So you can just do something like\n\nssh -J jump-user@jumpserver remote-user@remote-server\n\nYou can simplify the jump server config by pointing to another entry in your SSH config. Like\n\nssh -J my-jump-server remote-user@remote-server\n\nBut if you're going to go that far, just make a new config entry for your remote server, so that you can simplify it down to\n\nssh my-remote\n\nResources referenced:\nhttps://goteleport.com/blog/ssh-proxyjump-ssh-proxycommand\n\n[beryl-ax]: https://store-us.gl-inet.com/collections/travel-routers/products/beryl-ax-gl-mt3000-pocket-sized-wi-fi-6-wireless-travel-gigabit-router\n",
        "tags": [
            "tailscale",
            "ssh"
        ]
    },
    {
        "uri": "/cappucchino/terminal-logging-with-color",
        "title": "Terminal Logging With Color",
        "content": "\nThese days I've been writing a lot of babashka instead of reaching for bash or python to do minor\nscripting tasks at work.\n\nI am also a big fan of the work done at charm and the relevant products in this case are\ngum and lipgloss.\n\nUsing gum style I can log any text in basically any color I want. And while there's not a ton of\nfunctional benefits to this, I think there's something to be said about adding color into the logs\nwe write.\n\nI just wanted to take the time to outline the steps I took to do all of the following\nAdd a local dependency to a babashka script and import library code from a local directory\nHow to write color to shell streams\n\nColored Logging\n\nI picked the two color palettes from log to emulate first.\n\n Local Dependencies\n\n[1]: https://charm.sh\n[2]: https://github.com/charmbracelet/gum\n[3]: https://github.com/charmbracelet/lipgloss\n[4]: https://github.com/charmbracelet/log\n",
        "tags": [
            "story",
            "projects",
            "babashka",
            "clojure"
        ]
    },
    {
        "uri": "/cappucchino/the-enlightening-one",
        "title": "The Enlightening One",
        "content": "\nPurpose\n\nThis page documents every time my girlfriend teaches me something she \"thought you should already know\"\n\n Autumnal is a word\n\nWhen I heard my girlfriend say this for the first time, I thought it sounded too funny to be a real word. She got mad at me for asking Siri to define it, but we laugh about it now.\n\nBathtubs and showers have floors under them\n\nI'm don't know if this is a thought I had about rented places only, or living spaces in general. In my head, there was a hole for the tub or shower area.\n\nI've come to learn that there is in fact bathroom flooring under there to support the weight of the tub.\n\n \"coo coo ka choo\" is from a Beatles song\n\nI don't remember how it started, but my girlfriend was singing \"coo coo ka choo\" while we were making dinner one night. And in my head I was like \"wow, I didn't know she knew that Coheed and Cambria song\". Maybe like a minute or two later, she goes, \"You know what that's from right?\".\n\nI confidently reply, \"Yeah that Coheed song\". To which I got the fastest \"No Andy\" I think I've ever gotten.\n\nSo while I was thinking of background vocals in \"The Camper Velourium I: Faint of Hearts\", she was thinking of \"I am the Walrus\"\n\n: https://www.youtube.com/watch?v=qGk5lsSug2M\n\nTo Be Continued\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/thinking-about-binary-numbers",
        "title": "Thinking About Binary Numbers",
        "content": "\nI was working with Lauren to teach her how to convert between binary and decimal\nnumbers. I think it's super interesting to get to visit these ideas with her and\nsee how \"fresh eyes\" see them for the first time. \n\n!--more--\n\nAnother super interesting thing that I don't think I've thought about before is\nmultiplying binary numbers. She and I touched very briefly on what addition\nlooks like. \n\nIn the moment though, I could not wrap my head around what subtraction looks\nlike. Multiplication I tried to think about since it's \"close\" to what addition\nis, I figured I could reason through it.\n\nKeeping a simple example in mind, I tried to multiply 11 by 11- these being\n3 in decimal. Knowing the answer had to look like 1001, I stumbled trying\ncome up with a reason that \"normal multiplication\" works. \n\nThis may or may not look confusing:\n(11) * (11) = (11) * (10) + (11) * (1) = (110) + (11) = 1001  \n\nThere was a little voice in the back of my head that said I have seen this\nbefore, but where?\n\nIt hit me. Abstract Algebra, of course.\n\nBinary numbers are just strings of zeros and ones, which is exactly what the\ngroup  of integers mod 2 is. Of course I'm using addition mod 2 as the group\noperation here, but I took a second to think about if I could easily throw\nmultiplication into this. \n\nNow, Abstract Algebra was like 3 months ago, so I don't remember all of the\ndetails of what needs to be satisfied to form a ring. I am pretty convinced this\ncan be one of those \"The proof is left to the readers as an exercise\" moments. \nFor completions sake, I think the easiest way to convince yourself of this is\n  that since we have a mapping from binary numbers to the natural numbers, and\n  multiplication is closed with regards to the naturals, then that mapping is an\n  isomorphism and we have closure of multiplication for binary numbers. But\n  again, it's been a while since I touched this material and I am purely going\n  off of my gut here.\n  \nSo that's how I convinced myself that I can multiply binary numbers. I carry out\nthe \"normal multiplication algorithm\", multiply mod 2, and remember to carry the\n1 when necessary. \n\nI need to start a series of posts or just a really long post where I note a\nhandful of times where you can lift the hood on things and find some math. It's\na pretty neat moment when it happens, if you appreciate that sort of thing. \n",
        "tags": []
    },
    {
        "uri": "/cappucchino/this-is-an-org-post",
        "title": "This is an Org Post",
        "content": "\nToday I learned that =hugo= has support for org-mode files.\n\nI knew that [[https://ox-hugo.scripter.co/][ox-hugo]] is a thing, but this is different. And I never thought to dig into the docs to\nfigure out if I can author posts in org-mode and have it work.\n",
        "tags": [
            "written-in-org-mode"
        ]
    },
    {
        "uri": "/cappucchino/three-glass",
        "title": "The Three Glass Problem",
        "content": "I just came across the so called \"Three Glass Problem\" and thought I would try\nand solve it. It turns out to be fairly trivial with a bit of abstract algebra!\n!--more--\n\nObviously there are spoilers ahead if you have never heard of this problem. So\nturn away now if you care for the challenge!\n\nThe problem goes as follows: Given 3 cups, one that holds 8 units of liquid,\none that holds 5 units of liquid, and one that holds 3 units of liquid, create\ntwo servings 4 units in volume.\n\nHere is your final warning if you want to work this out for yourself. Below is\nmy solution.\n\nFor the sake of clarity, I'm going to say the goal is to measure out 2 drinks\nof 4 fluid ounces each. Knowing that we have to create two drinks, I assumed\neach drink had to be created with the 3 ounce cup and one of the other cups.\nSince we can fill cups and combine them and dump them when full, I thought of\ncyclic groups with addition mod \\(n\\) as a perfect model for this problem.\nSpecifically, \\(\\mathbb{Z}8\\) and \\(\\mathbb{Z}5\\) will be used here.\n\nAs a reminder the cyclic group \\(\\mathbb{Z}_n\\) is the group under addition mod\n\\(n\\), where the group elements are \\(0,1,2, \\ldots, n\\). Another term we need\nis the group \"generated\" by \\(a\\), where \\(a\\) is in \\(\\mathbb{Z}_n\\). So the\ngroup generated by \\(a\\) looks like: \\(\\{a, 2a, 3a, \\ldots, 0\\}\\).\n\nThe group generated by \\(3\\) in \\(\\mathbb{Z}_8\\) is\n\\(\\{3, 6, 1, 4, 7, 2, 5, 0\\}\\).\n\nSimilarly, the group generated by \\(3\\) in \\(\\mathbb{Z}_5\\) is\n\\(\\{3, 1, 4, 2, 0\\}\\).\n\nSo following these \"instructions\" gives you this:\n\nFirst, fill the 3 and pour it into the 8 twice, giving you 6 in the 8. Fill\nthe 3 again, top off the 8, giving you 1 in the 3. Dump the 8 and move the 1\nfrom the 3 to the 8. Fill the 3 one last time, and transfer to the 8. Boom,\nfirst drink done.\n\nNow take fill the 3 and pour it into the 5. Fill the 3 and top off the 5,\ngiving you 1 in the 3 and dump the 5. Transfer the 1 to the 5, and add one\nlast 3. This gives you the second 4 ounce drink. QED.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/til-silica-gel",
        "title": "TIL: Silica Gel can make Dried Bouquet",
        "content": "\nWas in a flower shop today and the cashier was trying to describe how a big carton of silica gel can\nbe used to dry out flowers.\n\nI chuckled because I'm not entirely sure where to get a bunch of silica gel, but then thought it's\ntime to start hoarding \"Do not eat\" packets.\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/use-rg-for-find-and-replace",
        "title": "Use `rg` for Find and Replace",
        "content": "\nHow to do the thing\n\nInclude a -o to limit the output to things that match\nUse any number of capture groups in your search string\nInclude a -r 'my-replacement-string' and use $x in my-replacement-string to reference your capture groups\n   $x starts at 1\n\n Example\n\nSay you have a log file and want to just match the date at the start of the line.\n\ncat my-file-to-search \\\n    | rg -o '^(\\d+-\\d+-\\d+).*' \\\n         -r '$1'\n\nI didn't actually test this, but it should work.\n\nThoughts\n\nThis is the sort of thing that you would probably think to reach for grep and\nsed to do.\n\nBut I think sed is a bit complicated and I tend to get bit by the differences\nbetween GNU sed and BSD sed.\n\nSo when I found out rg can handle this too, I was happy to switch.\n",
        "tags": [
            "shell-stuff"
        ]
    },
    {
        "uri": "/cappucchino/vim-notes",
        "title": "Notes on Vim",
        "content": "Honing your tools\n\nIt's pretty common to see craftpeople creating tools for themselves for a\nvariety of reasons. Maybe it's because the exact tool they need doesn't exist;\nperhaps a slight modification to a tool would help fit their style more.\n\n!--more--\n\nWhatever the case, I want to assert that this happens often. This is why I like\nto take time to learn about text editors from the '70s. I take no stance on the\nwhole Emacs v. Vim thing; it's a pretty silly thing to argue about. Plus, my\nsetup is running Spacemacs, a version of Emacs focused\non Vim keybindings, so I am not even sure how to categorize that one.\n\nI'm not particularly new to the app actually. I've been slowly configuring it to\nmy liking as I learn about new features. As someone who spends a lot of time\nediting text files, I don't mind honing my knowledge of this tool.\n\n The Vim way?\n\nSo on that note, I watched [Mastering the Vim\nLanguage](https://www.youtube.com/watch?v=wlR5gYd6um0) by ThoughtBot on YouTube\nand took some notes.\n\nIf you think of Vim as a language, then the commands can be thought of as a\n\"verb\" + \"noun\" couple. It also helps that the keybindings are more or less\nabbrieviations of the action or phrase they represent.\n\nSome Keybindings\n\n| Key | Action                                                        |\n| --- | ---                                                           |\n| c   | Delete and enter Insert mode                                  |\n|    | Indent                                                        |\n| <   | Outdent                                                       |\n| y   | Yank (copy)                                                   |\n| w   | Move forward a word                                           |\n| b   | Move backward a word                                          |\n| iw  | \"Inner Word\": Targets the word you are in                     |\n| it  | \"Inner Tag\": Targets the HTML tag you are in                  |\n| ip  | \"Inner Paragraph\"                                             |\n| as  | \"A Sentence\"                                                  |\n| f   | Find the character you type, puts cursor on the character     |\n| t   | Find the character you type, puts cursor before the character |\n| F   | f, but going backwards                                        |\n| T   | t, but going backwards                                        |\n| /   | Search forwards                                               |\n| ?   | Search backwards                                              |\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/webmention-myself",
        "title": "Webmention Myself",
        "content": "\n\n{{< \n    indieweb/reply\n    \"https://blog.andylu.dev/cappucchino/webmention-test/\"\n    \"@andylu\"\n    \"Trying to render some webmentions on this site\"\n}}\n",
        "tags": []
    },
    {
        "uri": "/cappucchino/webmention-test",
        "title": "Webmention Test",
        "content": "\n\n    \n        in reply to:\n        \n           @aaronpk\n        \n    \n    \n        Trying out this guide to sending webmentions\n    \n\n",
        "tags": [
            "indieweb"
        ]
    },
    {
        "uri": "/cappucchino/writing-in-org-mode",
        "title": "Writing In Org Mode",
        "content": "\nChanging .spacemacs\n\nLet me walk you through getting a fresh install of spacemacs to writing your first\nblog post.\n\nFollow the these instructions to download spacemacs\n    For me, I went to the Spacemacs\n        GitHub page and followed the instructions for homebrew.\n\n!--more--\n\nOpen spacemacs or your text editor of choice\n    This step is pretty simple right? We have to edit some text, so we open our\n        favorite text editor\n\nOpen your ~/.spacemacs file\n    This is where your settings live\n\nFind the bit of code that looks like this:\n    If it doesn't exist already, go ahead and just add this yourself.\n\n        dotspacemacs-configuration-layers\n    '(\n       ;; Lots of stuff in this set of parentheses\n     )\n    \nAdd the following snippet of code anywhere inside of the parentheses\n\n        (org :variables\n         org-enable-github-support t\n         org-export-with-toc       nil)\n    \n    After you add that in, assuming you did it at the end of whatever is already\n    there, it should look like this:\n\n        dotspacemacs-configuration-layers\n    '(\n        ;; Lots of stuff in this set of parentheses\n        (org :variables\n             org-enable-github-support t\n             org-export-with-toc       nil)\n    )\n    \n    So three things that I know of are happening here. The line that starts with\n    (org says, \"Add org-mode as a mode I can use in Emacs\". The\n    github-support line says, \"Let me export the file in the way Github likes\n    it\". Finally, the export-with-toc says, \"Don't include a table of contents\n    in any file I export\".\n\n    There's one more line we need to add before this works though.\n\nFind this line of code or add it yourself:\n\n        dotspacemacs-additional-packages '()\n    \nIn the parentheses, add this bit of text\n\n        ox-gfm\n    \n    This is a package that lets Org-mode export to GitHub Flavored Markdown, on\n    top of all of the other formats it can already handle.\n\nSave your file\n    In evil mode, that would be SPC f s.\n\nReload the init file\n    In evil mode, that would be SPC f e R\n\n That's all folks!\n",
        "tags": []
    },
    {
        "uri": "/cortado/better-elisp-evaluation-with-cider",
        "title": "Better Elisp Evaluation With Cider",
        "content": "\nBy stealing cider's overlay function, I don't have to look down to the message line anymore. But\nit's cool to have the usual output in the message line and in an overlay.\n\nhttps://endlessparentheses.com/eval-result-overlays-in-emacs-lisp.html\n",
        "tags": []
    },
    {
        "uri": "/cortado/clojure-named-anonymous-functions",
        "title": "Clojure Named Anonymous Functions",
        "content": "\nPeter Taoussanis said something like:\n\n when using annonymous functions, add a name to it so that where it errors, you\n leave a breadcrumb back to the annonymous function in the stacktrace\n\nCredit: https://www.youtube.com/watch?v=q65T6P4xVVQ",
        "tags": [
            "clojure"
        ]
    },
    {
        "uri": "/cortado/cloudflare-proxying-self-hosted-apps",
        "title": "Cloudflare Proxying Self Hosted Apps",
        "content": "\nI forget that when I allow cloudflare to proxy a URL for me, then I get SSL for free.\n\nAnd previously, I turned off the proxying for my git server so that I can connect over SSH. So I ran certbot to get a certificate I can use with that subdomain.\n\nAnd this morning I noticed that I needed a cert for my photos server too. So converted to a wildcard cert for all top level subdomains\n",
        "tags": [
            "self-hosting",
            "cloudflare"
        ]
    },
    {
        "uri": "/cortado/hugo-debugging",
        "title": "Hugo Debugging",
        "content": "\nMaybe I've just been out of the game for too long, but I don't remember debugging to be as easy as\n\np {{ debug.Dump site.Thing.I.Want.To.Inspect }} /p\nSource\n",
        "tags": []
    },
    {
        "uri": "/cortado/mandatory-visual-emacs-settings-on-macos",
        "title": "Mandatory Visual Emacs Settings on macOS",
        "content": "\nMacOS emacs needs to set the following:\n\n(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))\n(add-to-list 'default-frame-alist '(ns-appearance . dark))\n\nI commented the old value right above it in case things went south, but it seems fine for now",
        "tags": [
            "emacs",
            "macOS"
        ]
    },
    {
        "uri": "/cortado/new-music-from-coheed-the-joke",
        "title": "New Music From Coheed: The Joke",
        "content": "\nI saw in an email that Coheed put out a new single and rereleased Deranged. \n\nI agree with the band that the single doesn't fit with the last album - it's too\nsynthy. I'm not a huge fan of the new song right now. But maybe it will grow on\nme after another listen.\n\nDeranged is a trip down memory lane though and I will never be tired of that song\n",
        "tags": [
            "music",
            "coheed-and-cambria"
        ]
    },
    {
        "uri": "/cortado/prettier-docker-ps",
        "title": "Prettier Docker Ps",
        "content": "\nToday I learned you can select the columns you want displayed by docker ps\n\ndocker ps --format \"table {{ .Names }}\\t{{ .Status }}\\t{{ .Ports }}\"\n\nThis is way less noisy\n",
        "tags": [
            "shell-stuff",
            "bash"
        ]
    },
    {
        "uri": "/old-now/archive",
        "title": "Archive",
        "content": "\nSee my now page for my latest updates.\n\nArchived on 2025-01-21\n\n Reading\n\nI picked up SICP JS again.\n\nI even wrote up my solutions to a few exercises\n\nApps\n\nI discovered that anytype recently released their multiplayer feature, so I'm\ngoing to try and switch off of Notion for some things and move to Anytype.\n\n Archived on 2024-07-13\n\nReading\n\nI picked up and started some books\nThe Mythical Man-Month\nA Short Treatise Inviting the Reader to Discover the Subtle Art of Go\n\n Go\n\nI downloaded this app to play more games. And I've been kicking the weak AI's butt. But the less weak bots give me trouble still\n\nArchived on 2024-05-02\n\n Self Hosting stuff\n\nI'm working on my tech independence and putting my tech skills to the test.\n\nThis also relates to things I've been reading about permacomputing. By keeping the services I depend\non to things that I can host and maintain and on older hardware that I'm in charge of, maybe I'm\ntaking a step towards making technology more sustainable for the planet.\n\nGo\n\nIn my spare time, I've been learning how to play Go).\n\n BJJ\n\nI got my purple belt from Balance Studios on 2023-10-28.\n\n",
        "tags": []
    },
    {
        "uri": "/singles/about",
        "title": "About",
        "content": "\nThis is my about page\n\nYou can subscribe to updates.\n\nSubscribe via RSS\n\nI try to document the technical changes around this site in my Changelog\n",
        "tags": []
    },
    {
        "uri": "/singles/changelog",
        "title": "Changelog",
        "content": "\n2025-02-01\nEnshired my old versions of this site in their own sub-paths\n  V1 of the site\n  V2 of the site\nFixed the \"last modified\" time of all of the pages\n",
        "tags": []
    },
    {
        "uri": "/singles/coffee",
        "title": "Coffee",
        "content": "\nElixr\n\n Juan Peña\n\nNotes:\nTart\n",
        "tags": []
    },
    {
        "uri": "/singles/now",
        "title": "Now",
        "content": "\nThis is a now page. For stuff that used to be here, check out the\narchive.\n\n---\n\n| Currently |                                                 |\n|-----------|-------------------------------------------------|\n| Watching  | Abbot Elementary                                |\n| Gaming    | Fortnite with godzilla                          |\n| Reading   | Mastodon and blogs, no books in progress really |\n\n",
        "tags": []
    },
    {
        "uri": "/singles/posts-i-like",
        "title": "Posts I Like",
        "content": "\nhttps://analog.melanie-richards.com/journals/daily-journal\nnhttps://justsomeantifas.tumblr.com/zines\nhttps://manuelmoreale.com/discovering-new-blogs-is-stupid-hard\nhttps://miniflux.app/\nhttps://kevquirk.com/blog/i-ve-been-thinking-about-a-switch-to-the-fairphone-5\nhttps://sylvia.bearblog.dev/weeknotes-2025-03/\nhttps://www.benkuhn.net/writing/\nhttps://guzey.com/personal/why-have-a-blog/#but-i-dont-have-anything-original-to-say-and-i-would-be-just-repeating-things-said-elsewhere-on-the-internet\nhttps://blog.divaltor.dev/one-way-meetings/\n",
        "tags": []
    },
    {
        "uri": "/singles/uses",
        "title": "Uses",
        "content": "\nLaptop: 2013 Macbook Pro\nPhone: Fairphone 5\nKeyboard: Dactyl Manuform 5x6 with Drop Holy Panda Switches\n\n",
        "tags": []
    }
]