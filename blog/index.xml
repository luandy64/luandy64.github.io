<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Andy&#39;s Garden</title>
    <link>https://blog.andylu.dev/blog/</link>
    <description>Recent content in Blogs on Andy&#39;s Garden</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Dec 2023 12:13:04 -0500</lastBuildDate><atom:link href="https://blog.andylu.dev/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Packaging</title>
      <link>https://blog.andylu.dev/blog/python-packaging/</link>
      <pubDate>Fri, 01 Dec 2023 12:13:04 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/python-packaging/</guid>
      <description>I didn&amp;rsquo;t know what to use between poetry and hatch.
I just followed the guide from the Packaging Guide.
It ended with me having the following directory structure
. ├── pyproject.toml ├── README.org ├── src │ └── andy_aoc_2023 │ ├── day1.py │ └── __init__.py └── tests Which isn&amp;rsquo;t too crazy I guess.</description>
    </item>
    
    <item>
      <title>Magit: Multiple Push Remotes</title>
      <link>https://blog.andylu.dev/blog/magit-multiple-push-remotes/</link>
      <pubDate>Fri, 01 Dec 2023 11:06:44 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/magit-multiple-push-remotes/</guid>
      <description>I wanted to do the equivalent of this, but in magit
git remote rename origin github git remote add codeberg https://codeberg.org/jkreeftmeijer/ox-md-title.el.git git remote add origin https://codeberg.org/jkreeftmeijer/ox-md-title.el.git git remote set-url --add --push origin https://codeberg.org/jkreeftmeijer/ox-md-title.el.git git remote set-url --add --push origin https://github.com/jeffkreeftmeijer/ox-md-title.el git remote show origin * remote origin Fetch URL: https://codeberg.org/jkreeftmeijer/ox-md-title.el.git Push URL: https://codeberg.org/jkreeftmeijer/ox-md-title.el.git Push URL: https://github.com/jeffkreeftmeijer/ox-md-title.el HEAD branch: main Remote branch: main new (next fetch will store in remotes/origin) Local ref configured for &amp;#39;git push&amp;#39;: main pushes to main (up to date) Source</description>
    </item>
    
    <item>
      <title>Self Hosting Email</title>
      <link>https://blog.andylu.dev/blog/self-hosting-email/</link>
      <pubDate>Thu, 30 Nov 2023 17:03:01 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/self-hosting-email/</guid>
      <description>I&amp;rsquo;ve made a couple attempts at this so far.
The software I&amp;rsquo;ve been looking at is:
 https://stalw.art/ https://www.cyrusimap.org/  I didn&amp;rsquo;t really give Cyrus a good go because I got Stalwart in a spot where I could receive messages through IMAP.
I didn&amp;rsquo;t get far at all with sending messages. Oracle is my currently cloud provider and port 25 is blocked on my account.
The feature that drew me to both of these projects is JMAP support.</description>
    </item>
    
    <item>
      <title>Bash `while` loops</title>
      <link>https://blog.andylu.dev/blog/bash-while-loops/</link>
      <pubDate>Mon, 27 Nov 2023 15:54:59 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/bash-while-loops/</guid>
      <description>Here&amp;rsquo;s a bash snippet I can see myself using one day
while :; do ls -lh &amp;#34;$( ls -t1 /tmp/tmp* | head -n 1 )&amp;#34;; sleep 10; done  &amp;quot;$( ls -t1 /tmp/tmp* | head -n 1 )&amp;quot;: Get a file name  ls -t1 /tmp/tmp*: List the files in /tmp/tmp* ordered by most recently updated head -n 1: Get the first one   ls -lh &amp;lt;one-file&amp;gt;: Get the long listing of just one file The rest of it is just to do it over and over so that I can see changes in the file size  </description>
    </item>
    
    <item>
      <title>Learning About Hugo</title>
      <link>https://blog.andylu.dev/blog/learning-about-hugo/</link>
      <pubDate>Fri, 17 Nov 2023 23:23:16 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/learning-about-hugo/</guid>
      <description>I think I&amp;rsquo;ve tried to keep a blog going for so long and on so many different stacks that I never sat down to learn about how hugo works.
  Like wow, I can write some templating, shove it in a &amp;ldquo;shortcode&amp;rdquo;, and reuse it everywhere?
  Testing it now: Docs
  Here&amp;rsquo;s a center block
   I&amp;rsquo;m not entirely sure when I would be using this center thing.</description>
    </item>
    
    <item>
      <title>My Babashka Cookbook</title>
      <link>https://blog.andylu.dev/blog/my-babashka-cookbook/</link>
      <pubDate>Sun, 29 Oct 2023 23:26:22 -0400</pubDate>
      
      <guid>https://blog.andylu.dev/blog/my-babashka-cookbook/</guid>
      <description>This post is the one I want to reference when I do something in babashka and forget syntax or something.
Capture a process&amp;rsquo;s STDOUT and process the string after (require &amp;#39;[babashka.process :as bp]) (-&amp;gt; (bp/shell {:out :string} &amp;#34;do-the-thing&amp;#34;) :out (clojure.string/split #&amp;#34;\n&amp;#34;)) Import a local library Dynamically You can add deps as one of the first steps in your scripts.
(require &amp;#39;[babashka.deps :as deps]) (deps/add-deps &amp;#39;{:deps {io.github.lispyclouds/bblgum {:git/sha &amp;#34;1d4de3d49b84f64d1b71930fa1161f8d2622a4d9&amp;#34;} dev.andylu/clj-lipgloss {:local/root &amp;#34;/home/andy/git/clj-lipgloss&amp;#34;}}}) (require &amp;#39;[bblgum.</description>
    </item>
    
    <item>
      <title>Biff Tutorial</title>
      <link>https://blog.andylu.dev/blog/biff-tutorial/</link>
      <pubDate>Tue, 17 Oct 2023 19:48:08 -0400</pubDate>
      
      <guid>https://blog.andylu.dev/blog/biff-tutorial/</guid>
      <description>Here are my notes as I go through the Biff tutorial.
I&amp;rsquo;ve made a github repo here.
I spotted something that didn&amp;rsquo;t work quite right. So I opened an issue and PR on the main repo. Here are those links: issue and PR.
So I got to a point where the tutorial wanted me to hook up an email sending service to get login information sent out to users. I knew I already had a Resend account, so I opted to hook that up instead.</description>
    </item>
    
    <item>
      <title>Babashka Datetime</title>
      <link>https://blog.andylu.dev/blog/babashka-datetime/</link>
      <pubDate>Sun, 15 Oct 2023 14:39:22 -0400</pubDate>
      
      <guid>https://blog.andylu.dev/blog/babashka-datetime/</guid>
      <description>If I need a datetime in Python, I reach for
from datetime import datetime datetime.now() So I need something as quick for clojure.
Apparently, it&amp;rsquo;s just
(-&amp;gt; (java.time.LocalDate/now) str) ;; =&amp;gt; &amp;#34;2023-10-15&amp;#34; </description>
    </item>
    
    <item>
      <title>Future Blog Ideas</title>
      <link>https://blog.andylu.dev/blog/future-blog-ideas/</link>
      <pubDate>Sat, 14 Oct 2023 21:48:09 -0400</pubDate>
      
      <guid>https://blog.andylu.dev/blog/future-blog-ideas/</guid>
      <description>Here&amp;rsquo;s just a running list of things I want to write down thoughts about.
 babashka CLI design traefik as a reverse proxy for tailscale services  </description>
    </item>
    
    <item>
      <title>Terminal Logging With Color</title>
      <link>https://blog.andylu.dev/blog/terminal-logging-with-color/</link>
      <pubDate>Sat, 14 Oct 2023 21:25:56 -0400</pubDate>
      
      <guid>https://blog.andylu.dev/blog/terminal-logging-with-color/</guid>
      <description>These days I&amp;rsquo;ve been writing a lot of babashka instead of reaching for bash or python to do minor scripting tasks at work.
I am also a big fan of the work done at charm and the relevant products in this case are gum and lipgloss.
Using gum style I can log any text in basically any color I want. And while there&amp;rsquo;s not a ton of functional benefits to this, I think there&amp;rsquo;s something to be said about adding color into the logs we write.</description>
    </item>
    
    <item>
      <title>Git Submodules</title>
      <link>https://blog.andylu.dev/blog/git-submodules/</link>
      <pubDate>Tue, 08 Nov 2022 23:00:56 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/git-submodules/</guid>
      <description>The first time I learned about git submodules was actually from working with hugo.
The documentation used to describe how you can have your main branch live in a directory that points to a diffent origin than your current branch.
It&amp;rsquo;s a cool feature that I never remember how to use, so here are notes I took after rediscovering it recently.
 To add a submodule
git submodule add https://github.com/some-other-repo To clone a submodule locally</description>
    </item>
    
    <item>
      <title>TIL: Silica Gel can make Dried Bouquet</title>
      <link>https://blog.andylu.dev/blog/til-silica-gel/</link>
      <pubDate>Tue, 08 Nov 2022 16:41:06 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/til-silica-gel/</guid>
      <description>Was in a flower shop today and the cashier was trying to describe how a big carton of silica gel can be used to dry out flowers.
I chuckled because I&amp;rsquo;m not entirely sure where to get a bunch of silica gel, but then thought it&amp;rsquo;s time to start hoarding &amp;ldquo;Do not eat&amp;rdquo; packets.</description>
    </item>
    
    <item>
      <title>KAllan&#39;s Telephone and Answering Machine Notes</title>
      <link>https://blog.andylu.dev/blog/docker-practice/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.andylu.dev/blog/docker-practice/</guid>
      <description>Setup Installing docker I always like the DigitalOcean tutorials, so that&amp;rsquo;s what I followed here. Installing Docker on Ubuntu 20.04
One note: I had to restart my computer instead of just logging out in order to get the docker group update to take effect.
Clone the repos git clone git@github.com:KAllan357/answering-machine.git git clone git@github.com:KAllan357/telephone.git Nothing special here.
Install Go I just followed these instructions.
Do the thing Start the answering machine outside of docker Running go run main.</description>
    </item>
    
    <item>
      <title>Clojurescript Project Setup</title>
      <link>https://blog.andylu.dev/blog/clojurescript-project-setup/</link>
      <pubDate>Mon, 06 Jul 2020 07:52:15 -0500</pubDate>
      
      <guid>https://blog.andylu.dev/blog/clojurescript-project-setup/</guid>
      <description>Outcomes By the end of this post, you will be able to setup a new clojurescript project, setup emacs to be your development environment, and deploy your app to Github Pages
Background I&amp;rsquo;ve written two clojurescript projects now, Sundial and DataBooze, and I want to document the set up process. The first time was a massive undertaking because it was my first time. But frustrating enough, so was the second time, even though I thought I nailed down the process and took notes on it.</description>
    </item>
    
  </channel>
</rss>
